repeat
    task.wait()
until game:IsLoaded()
local library = {}
local ToggleUI = false
library.currentTab = nil
library.flags = {}

local services =
    setmetatable(
    {},
    {
        __index = function(t, k)
            return game.GetService(game, k)
        end
    }
)

local mouse = services.Players.LocalPlayer:GetMouse()

-- 颜色设置
local MainColor = Color3.fromRGB(98, 37, 184)  -- 主紫色
local Background = Color3.fromRGB(30, 20, 50)  -- 深紫色背景
local zyColor = Color3.fromRGB(70, 30, 130)    -- 次级紫色
local TextColor = Color3.fromRGB(240, 230, 255) -- 浅色文字
local AccentColor = Color3.fromRGB(180, 80, 220) -- 强调色

-- 平滑动画函数
function Tween(obj, t, data)
    services.TweenService:Create(obj, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
    return true
end

-- 水波纹效果
function Ripple(obj)
    spawn(
        function()
            if obj.ClipsDescendants ~= true then
                obj.ClipsDescendants = true
            end
            local Ripple = Instance.new("ImageLabel")
            Ripple.Name = "Ripple"
            Ripple.Parent = obj
            Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Ripple.BackgroundTransparency = 1.000
            Ripple.ZIndex = 8
            Ripple.Image = "rbxassetid://2708891598"
            Ripple.ImageTransparency = 0.800
            Ripple.ScaleType = Enum.ScaleType.Fit
            Ripple.ImageColor3 = AccentColor
            Ripple.Position =
                UDim2.new(
                (mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X,
                0,
                (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y,
                0
            )
            Tween(
                Ripple,
                {0.3, "Quint", "Out"},
                {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)}
            )
            wait(0.15)
            Tween(Ripple, {0.3, "Quint", "Out"}, {ImageTransparency = 1})
            wait(0.3)
            Ripple:Destroy()
        end
    )
end

-- 标签切换系统
local switchingTabs = false
function switchTab(new)
    if switchingTabs then
        return
    end
    local old = library.currentTab
    if old == nil then
        new[2].Visible = true
        library.currentTab = new
        Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
        Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})
        return
    end

    if old[1] == new[1] then
        return
    end
    switchingTabs = true
    library.currentTab = new

    Tween(old[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0.5})
    Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
    Tween(old[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0.5})
    Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})

    old[2].Visible = false
    new[2].Visible = true

    task.wait(0.15)
    switchingTabs = false
end

-- 拖拽功能
function drag(frame, hold)
    if not hold then
        hold = frame
    end
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        frame.Position =
            UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    hold.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                dragStart = input.Position
                startPos = frame.Position

                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end
                )
            end
        end
    )

    frame.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end
    )

    services.UserInputService.InputChanged:Connect(
        function(input)
            if input == dragInput and dragging then
                update(input)
            end
        end
    )
end

-- 主UI创建函数
function library.new(library, name, theme)
    -- 清理旧UI
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "FrostyUILib" then
            v:Destroy()
        end
    end

    -- 创建主UI
    local dogent = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local MainCorner = Instance.new("UICorner")
    local MainStroke = Instance.new("UIStroke")
    local TabMain = Instance.new("Frame")
    local Sidebar = Instance.new("Frame")
    local SidebarCorner = Instance.new("UICorner")
    local SidebarGradient = Instance.new("UIGradient")
    local TabBtns = Instance.new("ScrollingFrame")
    local TabBtnsList = Instance.new("UIListLayout")
    local Title = Instance.new("TextLabel")
    local TitleGradient = Instance.new("UIGradient")
    local ToggleBtn = Instance.new("TextButton")
    local ToggleBtnCorner = Instance.new("UICorner")
    local ToggleBtnGradient = Instance.new("UIGradient")
    local DropShadow = Instance.new("ImageLabel")

    -- UI保护
    if syn and syn.protect_gui then
        syn.protect_gui(dogent)
    end

    dogent.Name = "FrostyUILib"
    dogent.Parent = services.CoreGui
    dogent.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    -- 主窗口
    Main.Name = "Main"
    Main.Parent = dogent
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Background
    Main.BackgroundTransparency = 0.1
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 600, 0, 400)
    Main.ZIndex = 2
    Main.Active = true

    -- 主窗口圆角
    MainCorner.CornerRadius = UDim.new(0, 12)
    MainCorner.Name = "MainCorner"
    MainCorner.Parent = Main

    -- 主窗口描边
    MainStroke.Color = Color3.fromRGB(120, 80, 200)
    MainStroke.Thickness = 2
    MainStroke.Transparency = 0.7
    MainStroke.Parent = Main

    -- 标签内容区 (修复了背景透明问题)
    TabMain.Name = "TabMain"
    TabMain.Parent = Main
    TabMain.BackgroundColor3 = Background
    TabMain.BackgroundTransparency = 0.2
    TabMain.Position = UDim2.new(0.25, 0, 0, 10)
    TabMain.Size = UDim2.new(0, 440, 0, 380)

    -- 侧边栏
    Sidebar.Name = "Sidebar"
    Sidebar.Parent = Main
    Sidebar.BackgroundColor3 = zyColor
    Sidebar.BackgroundTransparency = 0.1
    Sidebar.Position = UDim2.new(0, 10, 0, 10)
    Sidebar.Size = UDim2.new(0, 130, 0, 380)

    -- 侧边栏圆角
    SidebarCorner.CornerRadius = UDim.new(0, 8)
    SidebarCorner.Name = "SidebarCorner"
    SidebarCorner.Parent = Sidebar

    -- 侧边栏渐变
    SidebarGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(80, 30, 150)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(50, 20, 100))
    }
    SidebarGradient.Rotation = 90
    SidebarGradient.Name = "SidebarGradient"
    SidebarGradient.Parent = Sidebar

    -- 标签按钮容器
    TabBtns.Name = "TabBtns"
    TabBtns.Parent = Sidebar
    TabBtns.Active = true
    TabBtns.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabBtns.BackgroundTransparency = 1.000
    TabBtns.Position = UDim2.new(0, 5, 0.1, 0)
    TabBtns.Size = UDim2.new(0, 120, 0, 340)
    TabBtns.CanvasSize = UDim2.new(0, 0, 1, 0)
    TabBtns.ScrollBarThickness = 3
    TabBtns.ScrollBarImageColor3 = AccentColor

    -- 标签按钮布局
    TabBtnsList.Name = "TabBtnsList"
    TabBtnsList.Parent = TabBtns
    TabBtnsList.SortOrder = Enum.SortOrder.LayoutOrder
    TabBtnsList.Padding = UDim.new(0, 10)

    -- 标题
    Title.Name = "Title"
    Title.Parent = Sidebar
    Title.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Title.BackgroundTransparency = 1.000
    Title.Position = UDim2.new(0, 10, 0.01, 0)
    Title.Size = UDim2.new(0, 110, 0, 30)
    Title.Font = Enum.Font.GothamBold
    Title.Text = name or "Frosty UI"
    Title.TextColor3 = TextColor
    Title.TextSize = 18.000
    Title.TextXAlignment = Enum.TextXAlignment.Left

    -- 标题渐变
    TitleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, AccentColor),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(180, 80, 220)),
        ColorSequenceKeypoint.new(1.00, AccentColor)
    }
    TitleGradient.Rotation = 90
    TitleGradient.Name = "TitleGradient"
    TitleGradient.Parent = Title

    -- 阴影效果
    DropShadow.Name = "DropShadow"
    DropShadow.Parent = Main
    DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    DropShadow.BackgroundTransparency = 1.000
    DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    DropShadow.Size = UDim2.new(1, 50, 1, 50)
    DropShadow.ZIndex = 1
    DropShadow.Image = "rbxassetid://1316045217"
    DropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    DropShadow.ImageTransparency = 0.8
    DropShadow.ScaleType = Enum.ScaleType.Slice
    DropShadow.SliceCenter = Rect.new(50, 50, 450, 450)

    -- 切换按钮 (修复了隐藏UI功能)
    ToggleBtn.Name = "ToggleBtn"
    ToggleBtn.Parent = dogent
    ToggleBtn.BackgroundColor3 = zyColor
    ToggleBtn.BackgroundTransparency = 0.1
    ToggleBtn.Position = UDim2.new(0.01, 0, 0.3, 0)
    ToggleBtn.Size = UDim2.new(0, 70, 0, 35)
    ToggleBtn.Font = Enum.Font.GothamBold
    ToggleBtn.Text = "隐藏UI"
    ToggleBtn.TextColor3 = TextColor
    ToggleBtn.TextSize = 14.000
    ToggleBtn.ZIndex = 3

    -- 切换按钮圆角
    ToggleBtnCorner.CornerRadius = UDim.new(0, 8)
    ToggleBtnCorner.Name = "ToggleBtnCorner"
    ToggleBtnCorner.Parent = ToggleBtn

    -- 切换按钮渐变
    ToggleBtnGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, zyColor),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(70, 30, 130))
    }
    ToggleBtnGradient.Rotation = 90
    ToggleBtnGradient.Name = "ToggleBtnGradient"
    ToggleBtnGradient.Parent = ToggleBtn

    -- 拖拽功能
    drag(Main)

    -- UI显示/隐藏功能 (改为真正的隐藏/显示)
    local isVisible = true
    ToggleBtn.MouseButton1Click:Connect(function()
        if isVisible then
            Main.Visible = false
            ToggleBtn.Text = "显示UI"
        else
            Main.Visible = true
            ToggleBtn.Text = "隐藏UI"
        end
        isVisible = not isVisible
    end)

    -- 标签按钮大小变化监听
    TabBtnsList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
        function()
            TabBtns.CanvasSize = UDim2.new(0, 0, 0, TabBtnsList.AbsoluteContentSize.Y + 20)
        end
    )

    -- 窗口对象
    local window = {}
    
    -- 创建标签页
    function window.Tab(window, name, icon)
        local Tab = Instance.new("ScrollingFrame")
        local TabContainer = Instance.new("Frame")
        local TabList = Instance.new("UIListLayout")
        local TabPadding = Instance.new("UIPadding")
        
        local TabBtn = Instance.new("Frame")
        local TabBtnCorner = Instance.new("UICorner")
        local TabBtnGradient = Instance.new("UIGradient")
        local TabIcon = Instance.new("ImageLabel")
        local TabText = Instance.new("TextLabel")
        local TabBtnButton = Instance.new("TextButton")
        
        -- 标签内容区
        Tab.Name = "Tab"
        Tab.Parent = TabMain
        Tab.Active = true
        Tab.BackgroundColor3 = Background
        Tab.BackgroundTransparency = 0.2
        Tab.Size = UDim2.new(1, 0, 1, 0)
        Tab.ScrollBarThickness = 3
        Tab.ScrollBarImageColor3 = AccentColor
        Tab.Visible = false
        
        -- 标签内容容器
        TabContainer.Name = "TabContainer"
        TabContainer.Parent = Tab
        TabContainer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabContainer.BackgroundTransparency = 1.000
        TabContainer.Size = UDim2.new(1, 0, 1, 0)
        
        -- 标签内容布局
        TabList.Name = "TabList"
        TabList.Parent = TabContainer
        TabList.SortOrder = Enum.SortOrder.LayoutOrder
        TabList.Padding = UDim.new(0, 10)
        
        -- 标签内容内边距
        TabPadding.Name = "TabPadding"
        TabPadding.Parent = TabContainer
        TabPadding.PaddingLeft = UDim.new(0, 5)
        TabPadding.PaddingTop = UDim.new(0, 5)
        
        -- 标签按钮
        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabBtns
        TabBtn.BackgroundColor3 = zyColor
        TabBtn.BackgroundTransparency = 0.5
        TabBtn.Size = UDim2.new(0, 120, 0, 35)
        
        -- 标签按钮圆角
        TabBtnCorner.CornerRadius = UDim.new(0, 6)
        TabBtnCorner.Name = "TabBtnCorner"
        TabBtnCorner.Parent = TabBtn
        
        -- 标签按钮渐变
        TabBtnGradient.Color = ColorSequence.new{
            ColorSequenceKeypoint.new(0.00, Color3.fromRGB(90, 40, 160)),
            ColorSequenceKeypoint.new(1.00, Color3.fromRGB(70, 30, 130))
        }
        TabBtnGradient.Rotation = 90
        TabBtnGradient.Name = "TabBtnGradient"
        TabBtnGradient.Parent = TabBtn
        
        -- 标签图标
        TabIcon.Name = "TabIcon"
        TabIcon.Parent = TabBtn
        TabIcon.BackgroundTransparency = 1.000
        TabIcon.Position = UDim2.new(0.1, 0, 0.15, 0)
        TabIcon.Size = UDim2.new(0, 25, 0, 25)
        TabIcon.Image = ("rbxassetid://%s"):format((icon or 4370341699))
        TabIcon.ImageColor3 = TextColor
        TabIcon.ImageTransparency = 0.5
        
        -- 标签文本
        TabText.Name = "TabText"
        TabText.Parent = TabBtn
        TabText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabText.BackgroundTransparency = 1.000
        TabText.Position = UDim2.new(0.35, 0, 0, 0)
        TabText.Size = UDim2.new(0, 70, 0, 35)
        TabText.Font = Enum.Font.GothamSemibold
        TabText.Text = name
        TabText.TextColor3 = TextColor
        TabText.TextSize = 14.000
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        TabText.TextTransparency = 0.5
        
        -- 标签按钮点击区域
        TabBtnButton.Name = "TabBtnButton"
        TabBtnButton.Parent = TabBtn
        TabBtnButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabBtnButton.BackgroundTransparency = 1.000
        TabBtnButton.Size = UDim2.new(1, 0, 1, 0)
        TabBtnButton.Font = Enum.Font.SourceSans
        TabBtnButton.Text = ""
        TabBtnButton.TextColor3 = Color3.fromRGB(0, 0, 0)
        TabBtnButton.TextSize = 14.000
        
        -- 标签内容大小变化监听
        TabList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
            function()
                Tab.CanvasSize = UDim2.new(0, 0, 0, TabList.AbsoluteContentSize.Y + 20)
            end
        )
        
        -- 标签切换点击事件
        TabBtnButton.MouseButton1Click:Connect(
            function()
                Ripple(TabBtnButton)
                switchTab({TabBtn, Tab})
            end
        )
        
        -- 默认显示第一个标签
        if library.currentTab == nil then
            switchTab({TabBtn, Tab})
        end
        
        -- 标签对象
        local tab = {}
        
        -- 创建分区
        function tab.section(tab, name, TabVal)
            local Section = Instance.new("Frame")
            local SectionCorner = Instance.new("UICorner")
            local SectionStroke = Instance.new("UIStroke")
            local SectionHeader = Instance.new("Frame")
            local SectionText = Instance.new("TextLabel")
            local SectionToggle = Instance.new("ImageButton")
            local SectionContent = Instance.new("Frame")
            local SectionContentList = Instance.new("UIListLayout")
            
            -- 分区框架
            Section.Name = "Section"
            Section.Parent = TabContainer
            Section.BackgroundColor3 = zyColor
            Section.BackgroundTransparency = 0.2
            Section.Size = UDim2.new(0.98, 0, 0, 40)
            
            -- 分区圆角
            SectionCorner.CornerRadius = UDim.new(0, 8)
            SectionCorner.Name = "SectionCorner"
            SectionCorner.Parent = Section
            
            -- 分区描边
            SectionStroke.Color = AccentColor
            SectionStroke.Thickness = 1
            SectionStroke.Transparency = 0.7
            SectionStroke.Parent = Section
            
            -- 分区头部
            SectionHeader.Name = "SectionHeader"
            SectionHeader.Parent = Section
            SectionHeader.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionHeader.BackgroundTransparency = 1.000
            SectionHeader.Size = UDim2.new(1, 0, 0, 40)
            
            -- 分区文本
            SectionText.Name = "SectionText"
            SectionText.Parent = SectionHeader
            SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionText.BackgroundTransparency = 1.000
            SectionText.Position = UDim2.new(0.1, 0, 0, 0)
            SectionText.Size = UDim2.new(0.8, 0, 1, 0)
            SectionText.Font = Enum.Font.GothamBold
            SectionText.Text = name
            SectionText.TextColor3 = TextColor
            SectionText.TextSize = 16.000
            SectionText.TextXAlignment = Enum.TextXAlignment.Left
            
            -- 分区切换按钮
            SectionToggle.Name = "SectionToggle"
            SectionToggle.Parent = SectionHeader
            SectionToggle.BackgroundTransparency = 1.000
            SectionToggle.Position = UDim2.new(0.9, -25, 0.25, 0)
            SectionToggle.Size = UDim2.new(0, 25, 0, 25)
            SectionToggle.Image = "rbxassetid://6031094667" -- 向下箭头
            SectionToggle.ImageColor3 = TextColor
            
            -- 分区内容
            SectionContent.Name = "SectionContent"
            SectionContent.Parent = Section
            SectionContent.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionContent.BackgroundTransparency = 1.000
            SectionContent.Position = UDim2.new(0, 5, 0, 45)
            SectionContent.Size = UDim2.new(1, -10, 0, 0)
            SectionContent.ClipsDescendants = true
            
            -- 分区内容布局
            SectionContentList.Name = "SectionContentList"
            SectionContentList.Parent = SectionContent
            SectionContentList.SortOrder = Enum.SortOrder.LayoutOrder
            SectionContentList.Padding = UDim.new(0, 8)
            
            -- 分区状态
            local open = TabVal or false
            
            -- 更新分区高度
            local function updateSize()
                Section.Size = UDim2.new(0.98, 0, 0, open and 50 + SectionContentList.AbsoluteContentSize.Y or 40)
                SectionContent.Size = UDim2.new(1, -10, 0, open and SectionContentList.AbsoluteContentSize.Y or 0)
                SectionToggle.Rotation = open and 180 or 0
            end
            
            -- 分区切换事件
            SectionToggle.MouseButton1Click:Connect(
                function()
                    open = not open
                    Tween(SectionToggle, {0.2, "Quint", "Out"}, {Rotation = open and 180 or 0})
                    Tween(Section, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(0.98, 0, 0, open and 50 + SectionContentList.AbsoluteContentSize.Y or 40)
                    })
                    Tween(SectionContent, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(1, -10, 0, open and SectionContentList.AbsoluteContentSize.Y or 0)
                    })
                end
            )
            
            -- 内容大小变化监听
            SectionContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                function()
                    if open then
                        updateSize()
                    end
                end
            )
            
            -- 初始化分区状态
            updateSize()
            
            -- 分区对象
            local section = {}
            
            -- 创建按钮
            function section.Button(section, text, callback)
                callback = callback or function() end
                
                local Button = Instance.new("Frame")
                local ButtonCorner = Instance.new("UICorner")
                local ButtonStroke = Instance.new("UIStroke")
                local ButtonText = Instance.new("TextLabel")
                local ButtonBtn = Instance.new("TextButton")
                
                -- 按钮框架
                Button.Name = "Button"
                Button.Parent = SectionContent
                Button.BackgroundColor3 = zyColor
                Button.BackgroundTransparency = 0.3
                Button.Size = UDim2.new(1, 0, 0, 35)
                
                -- 按钮圆角
                ButtonCorner.CornerRadius = UDim.new(0, 6)
                ButtonCorner.Name = "ButtonCorner"
                ButtonCorner.Parent = Button
                
                -- 按钮描边
                ButtonStroke.Color = AccentColor
                ButtonStroke.Thickness = 1
                ButtonStroke.Transparency = 0.7
                ButtonStroke.Parent = Button
                
                -- 按钮文本
                ButtonText.Name = "ButtonText"
                ButtonText.Parent = Button
                ButtonText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ButtonText.BackgroundTransparency = 1.000
                ButtonText.Size = UDim2.new(1, -10, 1, 0)
                ButtonText.Position = UDim2.new(0, 10, 0, 0)
                ButtonText.Font = Enum.Font.GothamSemibold
                ButtonText.Text = text
                ButtonText.TextColor3 = TextColor
                ButtonText.TextSize = 14.000
                ButtonText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 按钮点击区域
                ButtonBtn.Name = "ButtonBtn"
                ButtonBtn.Parent = Button
                ButtonBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ButtonBtn.BackgroundTransparency = 1.000
                ButtonBtn.Size = UDim2.new(1, 0, 1, 0)
                ButtonBtn.Font = Enum.Font.SourceSans
                ButtonBtn.Text = ""
                ButtonBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
                ButtonBtn.TextSize = 14.000
                
                -- 按钮点击事件
                ButtonBtn.MouseButton1Click:Connect(
                    function()
                        Ripple(ButtonBtn)
                        Tween(Button, {0.1, "Linear", "Out"}, {BackgroundTransparency = 0.1})
                        Tween(Button, {0.2, "Linear", "Out"}, {BackgroundTransparency = 0.3})
                        callback()
                    end
                )
                
                -- 按钮悬停效果
                ButtonBtn.MouseEnter:Connect(function()
                    Tween(Button, {0.2, "Linear", "Out"}, {BackgroundTransparency = 0.2})
                end)
                
                ButtonBtn.MouseLeave:Connect(function()
                    Tween(Button, {0.2, "Linear", "Out"}, {BackgroundTransparency = 0.3})
                end)
            end
            
            -- 创建标签
            function section:Label(text)
                local Label = Instance.new("Frame")
                local LabelCorner = Instance.new("UICorner")
                local LabelText = Instance.new("TextLabel")
                
                -- 标签框架
                Label.Name = "Label"
                Label.Parent = SectionContent
                Label.BackgroundColor3 = zyColor
                Label.BackgroundTransparency = 0.5
                Label.Size = UDim2.new(1, 0, 0, 25)
                
                -- 标签圆角
                LabelCorner.CornerRadius = UDim.new(0, 6)
                LabelCorner.Name = "LabelCorner"
                LabelCorner.Parent = Label
                
                -- 标签文本
                LabelText.Name = "LabelText"
                LabelText.Parent = Label
                LabelText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelText.BackgroundTransparency = 1.000
                LabelText.Size = UDim2.new(1, -10, 1, 0)
                LabelText.Position = UDim2.new(0, 10, 0, 0)
                LabelText.Font = Enum.Font.GothamSemibold
                LabelText.Text = text
                LabelText.TextColor3 = TextColor
                LabelText.TextSize = 14.000
                LabelText.TextXAlignment = Enum.TextXAlignment.Left
                
                return LabelText
            end
            
            -- 创建开关
            function section.Toggle(section, text, flag, enabled, callback)
                callback = callback or function() end
                enabled = enabled or false
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                
                library.flags[flag] = enabled
                
                local Toggle = Instance.new("Frame")
                local ToggleCorner = Instance.new("UICorner")
                local ToggleText = Instance.new("TextLabel")
                local ToggleBtn = Instance.new("TextButton")
                local ToggleSwitch = Instance.new("Frame")
                local ToggleSwitchCorner = Instance.new("UICorner")
                local ToggleKnob = Instance.new("Frame")
                local ToggleKnobCorner = Instance.new("UICorner")
                
                -- 开关框架
                Toggle.Name = "Toggle"
                Toggle.Parent = SectionContent
                Toggle.BackgroundColor3 = zyColor
                Toggle.BackgroundTransparency = 0.3
                Toggle.Size = UDim2.new(1, 0, 0, 35)
                
                -- 开关圆角
                ToggleCorner.CornerRadius = UDim.new(0, 6)
                ToggleCorner.Name = "ToggleCorner"
                ToggleCorner.Parent = Toggle
                
                -- 开关文本
                ToggleText.Name = "ToggleText"
                ToggleText.Parent = Toggle
                ToggleText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleText.BackgroundTransparency = 1.000
                ToggleText.Size = UDim2.new(0.7, -10, 1, 0)
                ToggleText.Position = UDim2.new(0, 10, 0, 0)
                ToggleText.Font = Enum.Font.GothamSemibold
                ToggleText.Text = text
                ToggleText.TextColor3 = TextColor
                ToggleText.TextSize = 14.000
                ToggleText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 开关按钮
                ToggleBtn.Name = "ToggleBtn"
                ToggleBtn.Parent = Toggle
                ToggleBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleBtn.BackgroundTransparency = 1.000
                ToggleBtn.Size = UDim2.new(1, 0, 1, 0)
                ToggleBtn.Font = Enum.Font.SourceSans
                ToggleBtn.Text = ""
                ToggleBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
                ToggleBtn.TextSize = 14.000
                
                -- 开关背景
                ToggleSwitch.Name = "ToggleSwitch"
                ToggleSwitch.Parent = Toggle
                ToggleSwitch.BackgroundColor3 = Background
                ToggleSwitch.Position = UDim2.new(0.85, -30, 0.25, 0)
                ToggleSwitch.Size = UDim2.new(0, 50, 0, 20)
                
                -- 开关背景圆角
                ToggleSwitchCorner.CornerRadius = UDim.new(0, 10)
                ToggleSwitchCorner.Name = "ToggleSwitchCorner"
                ToggleSwitchCorner.Parent = ToggleSwitch
                
                -- 开关旋钮
                ToggleKnob.Name = "ToggleKnob"
                ToggleKnob.Parent = ToggleSwitch
                ToggleKnob.BackgroundColor3 = enabled and AccentColor or Color3.fromRGB(150, 150, 150)
                ToggleKnob.Position = enabled and UDim2.new(0.5, 0, 0, 0) or UDim2.new(0, 0, 0, 0)
                ToggleKnob.Size = UDim2.new(0.5, 0, 1, 0)
                
                -- 开关旋钮圆角
                ToggleKnobCorner.CornerRadius = UDim.new(0, 10)
                ToggleKnobCorner.Name = "ToggleKnobCorner"
                ToggleKnobCorner.Parent = ToggleKnob
                
                -- 开关功能
                local funcs = {
                    SetState = function(self, state)
                        if state == nil then
                            state = not library.flags[flag]
                        end
                        if library.flags[flag] == state then
                            return
                        end
                        
                        Tween(
                            ToggleKnob,
                            TweenInfo.new(0.2, "Quint", "Out"),
                            {
                                Position = state and UDim2.new(0.5, 0, 0, 0) or UDim2.new(0, 0, 0, 0),
                                BackgroundColor3 = state and AccentColor or Color3.fromRGB(150, 150, 150)
                            }
                        )
                        library.flags[flag] = state
                        callback(state)
                    end
                }
                
                -- 初始化状态
                if enabled then
                    funcs:SetState(true)
                end
                
                -- 点击事件
                ToggleBtn.MouseButton1Click:Connect(
                    function()
                        funcs:SetState()
                    end
                )
                
                return funcs
            end
            
            -- 创建键位绑定
            function section.Keybind(section, text, default, callback)
                callback = callback or function() end
                assert(text, "No text provided")
                assert(default, "No default key provided")
                
                local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                local banned = {
                    Return = true,
                    Space = true,
                    Tab = true,
                    Backquote = true,
                    CapsLock = true,
                    Escape = true,
                    Unknown = true
                }
                local shortNames = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt"
                }
                
                local bindKey = default
                local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")
                
                local Keybind = Instance.new("Frame")
                local KeybindCorner = Instance.new("UICorner")
                local KeybindText = Instance.new("TextLabel")
                local KeybindValue = Instance.new("TextButton")
                local KeybindValueCorner = Instance.new("UICorner")
                
                -- 键位绑定框架
                Keybind.Name = "Keybind"
                Keybind.Parent = SectionContent
                Keybind.BackgroundColor3 = zyColor
                Keybind.BackgroundTransparency = 0.3
                Keybind.Size = UDim2.new(1, 0, 0, 35)
                
                -- 键位绑定圆角
                KeybindCorner.CornerRadius = UDim.new(0, 6)
                KeybindCorner.Name = "KeybindCorner"
                KeybindCorner.Parent = Keybind
                
                -- 键位绑定文本
                KeybindText.Name = "KeybindText"
                KeybindText.Parent = Keybind
                KeybindText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindText.BackgroundTransparency = 1.000
                KeybindText.Size = UDim2.new(0.6, -10, 1, 0)
                KeybindText.Position = UDim2.new(0, 10, 0, 0)
                KeybindText.Font = Enum.Font.GothamSemibold
                KeybindText.Text = text
                KeybindText.TextColor3 = TextColor
                KeybindText.TextSize = 14.000
                KeybindText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 键位绑定值
                KeybindValue.Name = "KeybindValue"
                KeybindValue.Parent = Keybind
                KeybindValue.BackgroundColor3 = Background
                KeybindValue.BackgroundTransparency = 0.5
                KeybindValue.Position = UDim2.new(0.65, 0, 0.2, 0)
                KeybindValue.Size = UDim2.new(0.3, 0, 0.6, 0)
                KeybindValue.AutoButtonColor = false
                KeybindValue.Font = Enum.Font.Gotham
                KeybindValue.Text = keyTxt
                KeybindValue.TextColor3 = TextColor
                KeybindValue.TextSize = 14.000
                
                -- 键位绑定值圆角
                KeybindValueCorner.CornerRadius = UDim.new(0, 6)
                KeybindValueCorner.Name = "KeybindValueCorner"
                KeybindValueCorner.Parent = KeybindValue
                
                -- 键位绑定监听
                services.UserInputService.InputBegan:Connect(
                    function(inp, gpe)
                        if gpe then
                            return
                        end
                        if inp.UserInputType ~= Enum.UserInputType.Keyboard then
                            return
                        end
                        if inp.KeyCode ~= bindKey then
                            return
                        end
                        callback(bindKey.Name)
                    end
                )
                
                -- 键位绑定更改
                KeybindValue.MouseButton1Click:Connect(
                    function()
                        KeybindValue.Text = "..."
                        local key, _ = services.UserInputService.InputEnded:Wait()
                        local keyName = tostring(key.KeyCode.Name)
                        if key.UserInputType ~= Enum.UserInputType.Keyboard then
                            KeybindValue.Text = keyTxt
                            return
                        end
                        if banned[keyName] then
                            KeybindValue.Text = keyTxt
                            return
                        end
                        bindKey = Enum.KeyCode[keyName]
                        keyTxt = shortNames[keyName] or keyName
                        KeybindValue.Text = keyTxt
                    end
                )
                
                -- 文本大小自适应
                KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(
                    function()
                        KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 20, 0.6, 0)
                    end
                )
            end
            
            -- 创建文本框
            function section.Textbox(section, text, flag, default, callback)
                callback = callback or function() end
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default text provided")
                
                library.flags[flag] = default
                
                local Textbox = Instance.new("Frame")
                local TextboxCorner = Instance.new("UICorner")
                local TextboxText = Instance.new("TextLabel")
                local TextboxInput = Instance.new("TextBox")
                local TextboxInputCorner = Instance.new("UICorner")
                local TextboxInputStroke = Instance.new("UIStroke")
                
                -- 文本框框架
                Textbox.Name = "Textbox"
                Textbox.Parent = SectionContent
                Textbox.BackgroundColor3 = zyColor
                Textbox.BackgroundTransparency = 0.3
                Textbox.Size = UDim2.new(1, 0, 0, 35)
                
                -- 文本框圆角
                TextboxCorner.CornerRadius = UDim.new(0, 6)
                TextboxCorner.Name = "TextboxCorner"
                TextboxCorner.Parent = Textbox
                
                -- 文本框标签
                TextboxText.Name = "TextboxText"
                TextboxText.Parent = Textbox
                TextboxText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextboxText.BackgroundTransparency = 1.000
                TextboxText.Size = UDim2.new(0.4, -10, 1, 0)
                TextboxText.Position = UDim2.new(0, 10, 0, 0)
                TextboxText.Font = Enum.Font.GothamSemibold
                TextboxText.Text = text
                TextboxText.TextColor3 = TextColor
                TextboxText.TextSize = 14.000
                TextboxText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 文本框输入
                TextboxInput.Name = "TextboxInput"
                TextboxInput.Parent = Textbox
                TextboxInput.BackgroundColor3 = Background
                TextboxInput.BackgroundTransparency = 0.5
                TextboxInput.Position = UDim2.new(0.45, 0, 0.2, 0)
                TextboxInput.Size = UDim2.new(0.5, 0, 0.6, 0)
                TextboxInput.Font = Enum.Font.Gotham
                TextboxInput.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                TextboxInput.PlaceholderText = "输入..."
                TextboxInput.Text = default
                TextboxInput.TextColor3 = TextColor
                TextboxInput.TextSize = 14.000
                TextboxInput.ClearTextOnFocus = false
                
                -- 文本框输入圆角
                TextboxInputCorner.CornerRadius = UDim.new(0, 6)
                TextboxInputCorner.Name = "TextboxInputCorner"
                TextboxInputCorner.Parent = TextboxInput
                
                -- 文本框输入描边
                TextboxInputStroke.Color = AccentColor
                TextboxInputStroke.Thickness = 1
                TextboxInputStroke.Transparency = 0.7
                TextboxInputStroke.Parent = TextboxInput
                
                -- 文本框焦点丢失事件
                TextboxInput.FocusLost:Connect(function()
                    if TextboxInput.Text == "" then
                        TextboxInput.Text = default
                    end
                    library.flags[flag] = TextboxInput.Text
                    callback(TextboxInput.Text)
                end)
                
                -- 文本大小自适应
                TextboxInput:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    TextboxInput.Size = UDim2.new(0, math.max(100, TextboxInput.TextBounds.X + 20), 0.6, 0)
                end)
            end
            
            -- 创建滑块
            function section.Slider(section, text, flag, default, min, max, precise, callback)
                callback = callback or function() end
                min = min or 0
                max = max or 100
                default = default or min
                precise = precise or false
                
                library.flags[flag] = default
                
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default value provided")
                
                local Slider = Instance.new("Frame")
                local SliderCorner = Instance.new("UICorner")
                local SliderText = Instance.new("TextLabel")
                local SliderBar = Instance.new("Frame")
                local SliderBarCorner = Instance.new("UICorner")
                local SliderFill = Instance.new("Frame")
                local SliderFillCorner = Instance.new("UICorner")
                local SliderValue = Instance.new("TextBox")
                local SliderValueCorner = Instance.new("UICorner")
                local SliderBtn = Instance.new("TextButton")
                
                -- 滑块框架
                Slider.Name = "Slider"
                Slider.Parent = SectionContent
                Slider.BackgroundColor3 = zyColor
                Slider.BackgroundTransparency = 0.3
                Slider.Size = UDim2.new(1, 0, 0, 50)
                
                -- 滑块圆角
                SliderCorner.CornerRadius = UDim.new(0, 6)
                SliderCorner.Name = "SliderCorner"
                SliderCorner.Parent = Slider
                
                -- 滑块文本
                SliderText.Name = "SliderText"
                SliderText.Parent = Slider
                SliderText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderText.BackgroundTransparency = 1.000
                SliderText.Size = UDim2.new(1, -20, 0, 20)
                SliderText.Position = UDim2.new(0, 10, 0, 5)
                SliderText.Font = Enum.Font.GothamSemibold
                SliderText.Text = text
                SliderText.TextColor3 = TextColor
                SliderText.TextSize = 14.000
                SliderText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 滑块背景条
                SliderBar.Name = "SliderBar"
                SliderBar.Parent = Slider
                SliderBar.BackgroundColor3 = Background
                SliderBar.BackgroundTransparency = 0.5
                SliderBar.Position = UDim2.new(0.05, 0, 0.6, 0)
                SliderBar.Size = UDim2.new(0.7, 0, 0, 6)
                
                -- 滑块背景条圆角
                SliderBarCorner.CornerRadius = UDim.new(0, 3)
                SliderBarCorner.Name = "SliderBarCorner"
                SliderBarCorner.Parent = SliderBar
                
                -- 滑块填充条
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderBar
                SliderFill.BackgroundColor3 = AccentColor
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                
                -- 滑块填充条圆角
                SliderFillCorner.CornerRadius = UDim.new(0, 3)
                SliderFillCorner.Name = "SliderFillCorner"
                SliderFillCorner.Parent = SliderFill
                
                -- 滑块值显示
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = Slider
                SliderValue.BackgroundColor3 = Background
                SliderValue.BackgroundTransparency = 0.5
                SliderValue.Position = UDim2.new(0.8, 0, 0.5, -15)
                SliderValue.Size = UDim2.new(0.15, 0, 0, 30)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(default)
                SliderValue.TextColor3 = TextColor
                SliderValue.TextSize = 14.000
                
                -- 滑块值显示圆角
                SliderValueCorner.CornerRadius = UDim.new(0, 6)
                SliderValueCorner.Name = "SliderValueCorner"
                SliderValueCorner.Parent = SliderValue
                
                -- 滑块点击区域
                SliderBtn.Name = "SliderBtn"
                SliderBtn.Parent = SliderBar
                SliderBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderBtn.BackgroundTransparency = 1.000
                SliderBtn.Size = UDim2.new(1, 0, 1, 0)
                SliderBtn.Font = Enum.Font.SourceSans
                SliderBtn.Text = ""
                SliderBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
                SliderBtn.TextSize = 14.000
                
                -- 滑块功能
                local funcs = {
                    SetValue = function(self, value)
                        local percent
                        if value then
                            percent = (value - min) / (max - min)
                        else
                            percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        end
                        percent = math.clamp(percent, 0, 1)
                        
                        if precise then
                            value = value or tonumber(string.format("%.2f", min + (max - min) * percent))
                        else
                            value = value or math.floor(min + (max - min) * percent)
                        end
                        
                        library.flags[flag] = value
                        SliderValue.Text = tostring(value)
                        SliderFill.Size = UDim2.new(percent, 0, 1, 0)
                        callback(value)
                    end
                }
                
                -- 初始化值
                funcs:SetValue(default)
                
                -- 滑块拖动
                local dragging = false
                
                SliderBtn.MouseButton1Down:Connect(function()
                    dragging = true
                    funcs:SetValue()
                end)
                
                services.UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetValue()
                    end
                end)
                
                -- 滑块值输入
                local allowed = {[""] = true}
                for i = 0, 9 do
                    allowed[tostring(i)] = true
                end
                allowed["-"] = true
                
                SliderValue.FocusLost:Connect(function()
                    if SliderValue.Text == "" then
                        SliderValue.Text = tostring(default)
                        return
                    end
                    
                    if not tonumber(SliderValue.Text) then
                        SliderValue.Text = tostring(default)
                        return
                    end
                    
                    local num = tonumber(SliderValue.Text)
                    if num < min then num = min end
                    if num > max then num = max end
                    
                    funcs:SetValue(num)
                end)
                
                SliderValue:GetPropertyChangedSignal("Text"):Connect(function()
                    if not SliderValue:IsFocused() then return end
                    
                    local text = SliderValue.Text
                    if not allowed[string.sub(text, -1, -1)] then
                        SliderValue.Text = string.sub(text, 1, -2)
                    end
                end)
                
                return funcs
            end
            
            -- 创建下拉菜单
            function section.Dropdown(section, text, flag, options, callback)
                callback = callback or function() end
                options = options or {}
                
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                
                library.flags[flag] = nil
                
                local Dropdown = Instance.new("Frame")
                local DropdownCorner = Instance.new("UICorner")
                local DropdownHeader = Instance.new("Frame")
                local DropdownText = Instance.new("TextLabel")
                local DropdownToggle = Instance.new("ImageButton")
                local DropdownContent = Instance.new("Frame")
                local DropdownContentList = Instance.new("UIListLayout")
                local DropdownContentPadding = Instance.new("UIPadding")
                
                -- 下拉菜单框架
                Dropdown.Name = "Dropdown"
                Dropdown.Parent = SectionContent
                Dropdown.BackgroundColor3 = zyColor
                Dropdown.BackgroundTransparency = 0.3
                Dropdown.ClipsDescendants = true
                Dropdown.Size = UDim2.new(1, 0, 0, 35)
                
                -- 下拉菜单圆角
                DropdownCorner.CornerRadius = UDim.new(0, 6)
                DropdownCorner.Name = "DropdownCorner"
                DropdownCorner.Parent = Dropdown
                
                -- 下拉菜单头部
                DropdownHeader.Name = "DropdownHeader"
                DropdownHeader.Parent = Dropdown
                DropdownHeader.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownHeader.BackgroundTransparency = 1.000
                DropdownHeader.Size = UDim2.new(1, 0, 0, 35)
                
                -- 下拉菜单文本
                DropdownText.Name = "DropdownText"
                DropdownText.Parent = DropdownHeader
                DropdownText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownText.BackgroundTransparency = 1.000
                DropdownText.Size = UDim2.new(0.8, -10, 1, 0)
                DropdownText.Position = UDim2.new(0, 10, 0, 0)
                DropdownText.Font = Enum.Font.GothamSemibold
                DropdownText.Text = text
                DropdownText.TextColor3 = TextColor
                DropdownText.TextSize = 14.000
                DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                
                -- 下拉菜单切换按钮
                DropdownToggle.Name = "DropdownToggle"
                DropdownToggle.Parent = DropdownHeader
                DropdownToggle.BackgroundTransparency = 1.000
                DropdownToggle.Position = UDim2.new(0.9, -25, 0.25, 0)
                DropdownToggle.Size = UDim2.new(0, 25, 0, 25)
                DropdownToggle.Image = "rbxassetid://6031094667" -- 向下箭头
                DropdownToggle.ImageColor3 = TextColor
                
                -- 下拉菜单内容
                DropdownContent.Name = "DropdownContent"
                DropdownContent.Parent = Dropdown
                DropdownContent.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownContent.BackgroundTransparency = 1.000
                DropdownContent.Position = UDim2.new(0, 5, 0, 40)
                DropdownContent.Size = UDim2.new(1, -10, 0, 0)
                
                -- 下拉菜单内容布局
                DropdownContentList.Name = "DropdownContentList"
                DropdownContentList.Parent = DropdownContent
                DropdownContentList.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownContentList.Padding = UDim.new(0, 5)
                
                -- 下拉菜单内容内边距
                DropdownContentPadding.Name = "DropdownContentPadding"
                DropdownContentPadding.Parent = DropdownContent
                DropdownContentPadding.PaddingLeft = UDim.new(0, 5)
                DropdownContentPadding.PaddingTop = UDim.new(0, 5)
                
                -- 下拉菜单状态
                local open = false
                
                -- 更新下拉菜单高度
                local function updateSize()
                    Dropdown.Size = UDim2.new(1, 0, 0, open and 45 + DropdownContentList.AbsoluteContentSize.Y or 35)
                    DropdownContent.Size = UDim2.new(1, -10, 0, open and DropdownContentList.AbsoluteContentSize.Y or 0)
                    DropdownToggle.Rotation = open and 180 or 0
                end
                
                -- 切换下拉菜单
                local function toggleDropdown()
                    open = not open
                    Tween(DropdownToggle, {0.2, "Quint", "Out"}, {Rotation = open and 180 or 0})
                    Tween(Dropdown, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(1, 0, 0, open and 45 + DropdownContentList.AbsoluteContentSize.Y or 35)
                    })
                    Tween(DropdownContent, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(1, -10, 0, open and DropdownContentList.AbsoluteContentSize.Y or 0)
                    })
                end
                
                -- 下拉菜单切换事件
                DropdownToggle.MouseButton1Click:Connect(toggleDropdown)
                
                -- 内容大小变化监听
                DropdownContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                    function()
                        if open then
                            updateSize()
                        end
                    end
                )
                
                -- 下拉菜单功能
                local funcs = {}
                
                -- 添加选项
                funcs.AddOption = function(self, option)
                    local Option = Instance.new("TextButton")
                    local OptionCorner = Instance.new("UICorner")
                    
                    -- 选项按钮
                    Option.Name = "Option_" .. option
                    Option.Parent = DropdownContent
                    Option.BackgroundColor3 = zyColor
                    Option.BackgroundTransparency = 0.5
                    Option.Size = UDim2.new(1, 0, 0, 30)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.Gotham
                    Option.Text = option
                    Option.TextColor3 = TextColor
                    Option.TextSize = 14.000
                    
                    -- 选项圆角
                    OptionCorner.CornerRadius = UDim.new(0, 6)
                    OptionCorner.Name = "OptionCorner"
                    OptionCorner.Parent = Option
                    
                    -- 选项点击事件
                    Option.MouseButton1Click:Connect(
                        function()
                            toggleDropdown()
                            callback(option)
                            DropdownText.Text = option
                            library.flags[flag] = option
                        end
                    )
                    
                    -- 选项悬停效果
                    Option.MouseEnter:Connect(function()
                        Tween(Option, {0.2, "Linear", "Out"}, {BackgroundTransparency = 0.3})
                    end)
                    
                    Option.MouseLeave:Connect(function()
                        Tween(Option, {0.2, "Linear", "Out"}, {BackgroundTransparency = 0.5})
                    end)
                    
                    updateSize()
                end
                
                -- 移除选项
                funcs.RemoveOption = function(self, option)
                    local option = DropdownContent:FindFirstChild("Option_" .. option)
                    if option then
                        option:Destroy()
                        updateSize()
                    end
                end
                
                -- 设置选项
                funcs.SetOptions = function(self, options)
                    for _, v in next, DropdownContent:GetChildren() do
                        if v:IsA("TextButton") then
                            v:Destroy()
                        end
                    end
                    for _, v in next, options do
                        funcs:AddOption(v)
                    end
                end
                
                -- 初始化选项
                funcs:SetOptions(options)
                
                return funcs
            end
            
            return section
        end
        
        return tab
    end
    
    return window
end

return library
