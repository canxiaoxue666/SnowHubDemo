repeat
    task.wait()
until game:IsLoaded()
local library = {}
local ToggleUI = false
library.currentTab = nil
library.flags = {}

local services = setmetatable({}, {
    __index = function(t, k)
        return game.GetService(game, k)
    end
})

local mouse = services.Players.LocalPlayer:GetMouse()

-- Enhanced Tween function with more options
function Tween(obj, t, data, callback)
    local tween = services.TweenService:Create(
        obj, 
        TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]], t[4] or 0, t[5] or false, t[6] or 0),
        data
    )
    if callback then
        tween.Completed:Connect(callback)
    end
    tween:Play()
    return tween
end

-- Improved Ripple effect with more customization
function Ripple(obj, color, sizeMultiplier, duration)
    spawn(function()
        if obj.ClipsDescendants ~= true then
            obj.ClipsDescendants = true
        end
        local Ripple = Instance.new("ImageLabel")
        Ripple.Name = "Ripple"
        Ripple.Parent = obj
        Ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Ripple.BackgroundTransparency = 1.000
        Ripple.ZIndex = 8
        Ripple.Image = "rbxassetid://2708891598"
        Ripple.ImageTransparency = 0.800
        Ripple.ScaleType = Enum.ScaleType.Fit
        Ripple.ImageColor3 = color or Color3.fromRGB(100, 150, 255)
        Ripple.Position = UDim2.new(
            (mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X,
            0,
            (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y,
            0
        )
        
        local finalSize = sizeMultiplier and UDim2.new(12 * sizeMultiplier, 0, 12 * sizeMultiplier, 0) or UDim2.new(12, 0, 12, 0)
        
        Tween(
            Ripple,
            {duration or 0.3, "Linear", "InOut"},
            {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = finalSize}
        )
        wait(0.15)
        Tween(Ripple, {duration or 0.3, "Linear", "InOut"}, {ImageTransparency = 1})
        wait(duration or 0.3)
        Ripple:Destroy()
    end)
end

local toggled = false

-- Switch Tabs with enhanced animation
local switchingTabs = false
function switchTab(new)
    if switchingTabs then
        return
    end
    local old = library.currentTab
    if old == nil then
        new[2].Visible = true
        library.currentTab = new
        Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
        Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})
        return
    end

    if old[1] == new[1] then
        return
    end
    switchingTabs = true
    library.currentTab = new

    Tween(old[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0.2})
    Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
    Tween(old[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0.2})
    Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})

    -- Fade animation for tab content
    Tween(old[2], {0.1, "Quad", "Out"}, {BackgroundTransparency = 1}, function()
        old[2].Visible = false
        new[2].Visible = true
        Tween(new[2], {0.1, "Quad", "In"}, {BackgroundTransparency = 0})
    end)

    task.wait(0.15)
    switchingTabs = false
end

-- Enhanced drag function with inertia
function drag(frame, hold)
    if not hold then
        hold = frame
    end
    local dragging
    local dragInput
    local dragStart
    local startPos
    local lastPos = startPos
    local velocity = Vector2.new(0, 0)
    local lastTime = os.clock()
    
    -- Inertia effect
    game:GetService("RunService").Heartbeat:Connect(function()
        if not dragging and velocity.Magnitude > 0 then
            local deltaTime = os.clock() - lastTime
            lastTime = os.clock()
            
            -- Apply friction
            velocity = velocity * (1 - math.min(deltaTime * 5, 1))
            
            -- Apply velocity
            frame.Position = UDim2.new(
                frame.Position.X.Scale, 
                frame.Position.X.Offset + velocity.X * deltaTime * 1000,
                frame.Position.Y.Scale, 
                frame.Position.Y.Offset + velocity.Y * deltaTime * 1000
            )
        end
    end)

    local function update(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X,
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
        
        -- Calculate velocity
        if lastPos then
            local currentTime = os.clock()
            local deltaTime = currentTime - lastTime
            if deltaTime > 0 then
                velocity = Vector2.new(
                    (newPos.X.Offset - lastPos.X.Offset) / deltaTime,
                    (newPos.Y.Offset - lastPos.Y.Offset) / deltaTime
                ) * 0.5 -- Dampening factor
            end
            lastTime = currentTime
        end
        
        lastPos = newPos
        frame.Position = newPos
    end

    hold.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            lastPos = startPos
            velocity = Vector2.new(0, 0)
            lastTime = os.clock()

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    services.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

function library.new(library, name, theme)
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "frosty is cute" then
            v:Destroy()
        end
    end

    -- Enhanced dark theme colors
    local MainColor = Color3.fromRGB(25, 25, 35)
    local Background = Color3.fromRGB(15, 15, 25)
    local SecondaryColor = Color3.fromRGB(40, 40, 60)
    local HoverColor = Color3.fromRGB(60, 60, 80)
    local AccentColor = Color3.fromRGB(100, 150, 255)
    local TextColor = Color3.fromRGB(220, 220, 220)
    local DisabledColor = Color3.fromRGB(100, 100, 100)

    -- Transparency settings
    local MainTransparency = 0.2
    local HoverTransparency = 0.1
    local ActiveTransparency = 0
    local ElementTransparency = 0.3
    local TextTransparency = 0.1

    -- Create main UI elements
    local dogent = Instance.new("ScreenGui")
    local Main = Instance.new("Frame")
    local TabMain = Instance.new("Frame")
    local MainC = Instance.new("UICorner")
    local SB = Instance.new("Frame")
    local SBC = Instance.new("UICorner")
    local Side = Instance.new("Frame")
    local SideG = Instance.new("UIGradient")
    local TabBtns = Instance.new("ScrollingFrame")
    local TabBtnsL = Instance.new("UIListLayout")
    local ScriptTitle = Instance.new("TextLabel")
    local SBG = Instance.new("UIGradient")
    local Open = Instance.new("TextButton")
    local UIG = Instance.new("UIGradient")
    local DropShadowHolder = Instance.new("Frame")
    local DropShadow = Instance.new("ImageLabel")
    local UICornerMain = Instance.new("UICorner")
    local UIGradient = Instance.new("UIGradient")
    local UIGradientTitle = Instance.new("UIGradient")
    local Border = Instance.new("Frame")
    local BorderGradient = Instance.new("UIGradient")
    local InnerGlow = Instance.new("ImageLabel")
    local OuterGlow = Instance.new("ImageLabel")

    -- UI protection
    if syn and syn.protect_gui then
        syn.protect_gui(dogent)
    end

    dogent.Name = "frosty is cute"
    dogent.Parent = services.CoreGui
    dogent.ZIndexBehavior = Enum.ZIndexBehavior.Global

    function UiDestroy()
        Tween(Main, {0.3, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 0)}, function()
            dogent:Destroy()
        end)
    end

    function ToggleUILib()
        if not ToggleUI then
            Tween(Main, {0.3, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 0)}, function()
                dogent.Enabled = false
            end)
            ToggleUI = true
        else
            dogent.Enabled = true
            Tween(Main, {0.3, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 353)})
            ToggleUI = false
        end
    end

    -- Main window with enhanced effects
    Main.Name = "Main"
    Main.Parent = dogent
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Background
    Main.BackgroundTransparency = MainTransparency
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 572, 0, 353)
    Main.ZIndex = 2
    Main.Active = true

    -- Animated gradient border
    Border.Name = "Border"
    Border.Parent = Main
    Border.BackgroundColor3 = Color3.new(1, 1, 1)
    Border.BorderSizePixel = 0
    Border.Size = UDim2.new(1, 2, 1, 2)
    Border.Position = UDim2.new(0, -1, 0, -1)
    Border.ZIndex = 1
    
    BorderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 100, 100)),
        ColorSequenceKeypoint.new(0.25, Color3.fromRGB(100, 255, 100)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(100, 100, 255)),
        ColorSequenceKeypoint.new(0.75, Color3.fromRGB(255, 255, 100)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 100, 255))
    }
    BorderGradient.Rotation = 90
    BorderGradient.Parent = Border
    
    local UICorner = Instance.new("UICorner", Border)
    UICorner.CornerRadius = UDim.new(0, 8)
    
    local borderTween = game:GetService("TweenService"):Create(
        BorderGradient,
        TweenInfo.new(5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 360}
    )
    borderTween:Play()

    -- Inner glow effect
    InnerGlow.Name = "InnerGlow"
    InnerGlow.Parent = Main
    InnerGlow.BackgroundTransparency = 1
    InnerGlow.BorderSizePixel = 0
    InnerGlow.Size = UDim2.new(1, 0, 1, 0)
    InnerGlow.ZIndex = 3
    InnerGlow.Image = "rbxassetid://5028857084"
    InnerGlow.ImageColor3 = Color3.fromRGB(50, 50, 80)
    InnerGlow.ImageTransparency = 0.8
    InnerGlow.ScaleType = Enum.ScaleType.Slice
    InnerGlow.SliceCenter = Rect.new(24, 24, 276, 276)
    InnerGlow.SliceScale = 0.5

    -- Outer glow effect
    OuterGlow.Name = "OuterGlow"
    OuterGlow.Parent = Main
    OuterGlow.BackgroundTransparency = 1
    OuterGlow.BorderSizePixel = 0
    OuterGlow.Size = UDim2.new(1, 40, 1, 40)
    OuterGlow.Position = UDim2.new(0, -20, 0, -20)
    OuterGlow.ZIndex = 0
    OuterGlow.Image = "rbxassetid://5028857084"
    OuterGlow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    OuterGlow.ImageTransparency = 0.9
    OuterGlow.ScaleType = Enum.ScaleType.Slice
    OuterGlow.SliceCenter = Rect.new(24, 24, 276, 276)
    InnerGlow.SliceScale = 0.5

    -- Main window rounded corners
    UICornerMain.Parent = Main
    UICornerMain.CornerRadius = UDim.new(0, 8)

    -- Enhanced shadow effect
    DropShadowHolder.Name = "DropShadowHolder"
    DropShadowHolder.Parent = Main
    DropShadowHolder.BackgroundTransparency = 1.000
    DropShadowHolder.BorderSizePixel = 0
    DropShadowHolder.Size = UDim2.new(1, 0, 1, 0)
    DropShadowHolder.ZIndex = 0

    DropShadow.Name = "DropShadow"
    DropShadow.Parent = DropShadowHolder
    DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    DropShadow.BackgroundTransparency = 1.000
    DropShadow.BorderSizePixel = 0
    DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    DropShadow.Size = UDim2.new(1, 43, 1, 43)
    DropShadow.ZIndex = 0
    DropShadow.Image = "rbxassetid://6015897843"
    DropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    DropShadow.ImageTransparency = 0.5
    DropShadow.ScaleType = Enum.ScaleType.Slice
    DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)

    -- Animated gradient background
    UIGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 25, 35)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(45, 45, 65)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 25, 35))
    }
    UIGradient.Rotation = 0
    UIGradient.Parent = Main

    local TweenService = game:GetService("TweenService")
    local tweeninfo = TweenInfo.new(15, Enum.EasingStyle.Linear, Enum.EasingDirection.In, -1)
    local tween = TweenService:Create(UIGradient, tweeninfo, {Rotation = 360})
    tween:Play()

    -- UI toggle with LeftControl
    services.UserInputService.InputEnded:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.LeftControl then
            if Main.Visible == true then
                Tween(Main, {0.2, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 0)}, function()
                    Main.Visible = false
                end)
            else
                Main.Visible = true
                Tween(Main, {0.2, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 353)})
            end
        end
    end)
    
    -- Enhanced drag with inertia
    drag(Main)

    -- Tab system
    TabMain.Name = "TabMain"
    TabMain.Parent = Main
    TabMain.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabMain.BackgroundTransparency = 1.000
    TabMain.Position = UDim2.new(0.217000037, 0, 0, 3)
    TabMain.Size = UDim2.new(0, 448, 0, 353)
    TabMain.ZIndex = 3

    MainC.CornerRadius = UDim.new(0, 5.5)
    MainC.Name = "MainC"
    MainC.Parent = Main

    -- Sidebar
    SB.Name = "SB"
    SB.Parent = Main
    SB.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    SB.BackgroundTransparency = ElementTransparency
    SB.BorderSizePixel = 0
    SB.Size = UDim2.new(0, 8, 0, 353)
    SB.ZIndex = 3

    SBC.CornerRadius = UDim.new(0, 6)
    SBC.Name = "SBC"
    SBC.Parent = SB

    Side.Name = "Side"
    Side.Parent = SB
    Side.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Side.BackgroundTransparency = ElementTransparency
    Side.BorderSizePixel = 0
    Side.ClipsDescendants = true
    Side.Position = UDim2.new(1, 0, 0, 0)
    Side.Size = UDim2.new(0, 110, 0, 353)
    Side.ZIndex = 3

    -- Sidebar gradient
    SideG.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 25, 35)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(45, 45, 65))
    }
    SideG.Rotation = 90
    SideG.Name = "SideG"
    SideG.Parent = Side

    TabBtns.Name = "TabBtns"
    TabBtns.Parent = Side
    TabBtns.Active = true
    TabBtns.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    TabBtns.BackgroundTransparency = 1.000
    TabBtns.BorderSizePixel = 0
    TabBtns.Position = UDim2.new(0, 0, 0.0973535776, 0)
    TabBtns.Size = UDim2.new(0, 110, 0, 318)
    TabBtns.CanvasSize = UDim2.new(0, 0, 1, 0)
    TabBtns.ScrollBarThickness = 0
    TabBtns.ZIndex = 4

    TabBtnsL.Name = "TabBtnsL"
    TabBtnsL.Parent = TabBtns
    TabBtnsL.SortOrder = Enum.SortOrder.LayoutOrder
    TabBtnsL.Padding = UDim.new(0, 12)

    -- Script title with enhanced effects
    ScriptTitle.Name = "ScriptTitle"
    ScriptTitle.Parent = Side
    ScriptTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    ScriptTitle.BackgroundTransparency = 1.000
    ScriptTitle.Position = UDim2.new(0, 0, 0.00953488424, 0)
    ScriptTitle.Size = UDim2.new(0, 102, 0, 20)
    ScriptTitle.Font = Enum.Font.GothamSemibold
    ScriptTitle.Text = name
    ScriptTitle.TextColor3 = AccentColor
    ScriptTitle.TextSize = 14.000
    ScriptTitle.TextScaled = true
    ScriptTitle.TextXAlignment = Enum.TextXAlignment.Left
    ScriptTitle.ZIndex = 4
    
    -- Text outline for better readability
    local titleOutline = Instance.new("UIStroke", ScriptTitle)
    titleOutline.Color = Color3.fromRGB(0, 0, 0)
    titleOutline.Thickness = 1
    titleOutline.Transparency = 0.5
    
    -- Title gradient animation
    UIGradientTitle.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, AccentColor),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(150, 200, 255)),
        ColorSequenceKeypoint.new(1.00, AccentColor)
    }
    UIGradientTitle.Parent = ScriptTitle

    -- Title animation
    local titleTween = game:GetService("TweenService"):Create(
        UIGradientTitle,
        TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Offset = Vector2.new(1, 0)}
    )
    titleTween:Play()

    SBG.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, SecondaryColor), ColorSequenceKeypoint.new(1.00, SecondaryColor)}
    SBG.Rotation = 90
    SBG.Name = "SBG"
    SBG.Parent = SB

    TabBtnsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabBtns.CanvasSize = UDim2.new(0, 0, 0, TabBtnsL.AbsoluteContentSize.Y + 18)
    end)

    -- Enhanced open/close button
    Open.Name = "Open"
    Open.Parent = dogent
    Open.BackgroundColor3 = Background
    Open.BackgroundTransparency = MainTransparency
    Open.Position = UDim2.new(0.00829315186, 0, 0.31107837, 0)
    Open.Size = UDim2.new(0, 50, 0, 50)
    Open.Font = Enum.Font.SourceSans
    Open.Text = ""
    Open.TextTransparency = 1
    Open.TextSize = 14.000
    Open.Active = true
    Open.ZIndex = 10

    -- Button rounded corners
    local OpenCorner = Instance.new("UICorner", Open)
    OpenCorner.CornerRadius = UDim.new(0, 9)
    
    -- Button outline
    local OpenOutline = Instance.new("UIStroke", Open)
    OpenOutline.Color = Color3.fromRGB(60, 60, 80)
    OpenOutline.Thickness = 1
    OpenOutline.Transparency = 0.5

    -- Button icon
    local OpenImage = Instance.new("ImageLabel")
    OpenImage.Name = "OpenImage"
    OpenImage.Parent = Open
    OpenImage.BackgroundTransparency = 1
    OpenImage.Size = UDim2.new(0.7, 0, 0.7, 0)
    OpenImage.Position = UDim2.new(0.15, 0, 0.15, 0)
    OpenImage.Image = "rbxassetid://7734068321"
    OpenImage.ImageColor3 = AccentColor
    OpenImage.ScaleType = Enum.ScaleType.Fit
    OpenImage.ZIndex = 11

    -- Button hover effects
    Open.MouseEnter:Connect(function()
        Tween(Open, {0.2, "Quint", "Out"}, {BackgroundTransparency = HoverTransparency})
        Tween(OpenImage, {0.2, "Quint", "Out"}, {ImageColor3 = Color3.fromRGB(150, 200, 255)})
        Tween(OpenOutline, {0.2, "Quint", "Out"}, {Transparency = 0.3})
    end)

    Open.MouseLeave:Connect(function()
        Tween(Open, {0.2, "Quint", "Out"}, {BackgroundTransparency = MainTransparency})
        Tween(OpenImage, {0.2, "Quint", "Out"}, {ImageColor3 = AccentColor})
        Tween(OpenOutline, {0.2, "Quint", "Out"}, {Transparency = 0.5})
    end)

    Open.MouseButton1Down:Connect(function()
        Tween(Open, {0.1, "Quint", "Out"}, {BackgroundTransparency = ActiveTransparency})
        Tween(OpenImage, {0.1, "Quint", "Out"}, {Size = UDim2.new(0.6, 0, 0.6, 0)})
    end)

    Open.MouseButton1Up:Connect(function()
        Tween(Open, {0.1, "Quint", "Out"}, {BackgroundTransparency = HoverTransparency})
        Tween(OpenImage, {0.1, "Quint", "Out"}, {Size = UDim2.new(0.7, 0, 0.7, 0)})
    end)

    local isVisible = true
    Open.MouseButton1Click:Connect(function()
        if isVisible then
            Tween(Main, {0.3, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 0)})
            Tween(OpenImage, {0.3, "Quint", "Out"}, {Rotation = 180})
        else
            Tween(Main, {0.3, "Quint", "Out"}, {Size = UDim2.new(0, Main.Size.X.Offset, 0, 353)})
            Tween(OpenImage, {0.3, "Quint", "Out"}, {Rotation = 0})
        end
        isVisible = not isVisible
    end)

    UIG.Parent = Open
    local window = {}
    
    function window.Tab(window, name, icon)
        local Tab = Instance.new("ScrollingFrame")
        local TabIco = Instance.new("ImageLabel")
        local TabText = Instance.new("TextLabel")
        local TabBtn = Instance.new("TextButton")
        local TabL = Instance.new("UIListLayout")

        Tab.Name = "Tab"
        Tab.Parent = TabMain
        Tab.Active = true
        Tab.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        Tab.BackgroundTransparency = 1.000
        Tab.Size = UDim2.new(1, 0, 1, 0)
        Tab.ScrollBarThickness = 2
        Tab.ScrollBarImageColor3 = AccentColor
        Tab.ScrollBarImageTransparency = 0.7
        Tab.Visible = false
        Tab.ZIndex = 4

        TabIco.Name = "TabIco"
        TabIco.Parent = TabBtns
        TabIco.BackgroundTransparency = 1.000
        TabIco.BorderSizePixel = 0
        TabIco.Size = UDim2.new(0, 24, 0, 24)
        TabIco.Image = ("rbxassetid://%s"):format((icon or 4370341699))
        TabIco.ImageTransparency = 0.2
        TabIco.ZIndex = 5

        TabText.Name = "TabText"
        TabText.Parent = TabIco
        TabText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabText.BackgroundTransparency = 1.000
        TabText.Position = UDim2.new(1.41666663, 0, 0, 0)
        TabText.Size = UDim2.new(0, 76, 0, 24)
        TabText.Font = Enum.Font.GothamSemibold
        TabText.Text = name
        TabText.TextColor3 = TextColor
        TabText.TextTransparency = 0.2
        TabText.TextSize = 14.000
        TabText.TextXAlignment = Enum.TextXAlignment.Left
        TabText.ZIndex = 5
        
        -- Text outline
        local tabTextOutline = Instance.new("UIStroke", TabText)
        tabTextOutline.Color = Color3.fromRGB(0, 0, 0)
        tabTextOutline.Thickness = 1
        tabTextOutline.Transparency = 0.7

        TabBtn.Name = "TabBtn"
        TabBtn.Parent = TabIco
        TabBtn.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        TabBtn.BackgroundTransparency = 1.000
        TabBtn.BorderSizePixel = 0
        TabBtn.Size = UDim2.new(0, 110, 0, 24)
        TabBtn.AutoButtonColor = false
        TabBtn.Font = Enum.Font.SourceSans
        TabBtn.Text = ""
        TabBtn.TextColor3 = Color3.fromRGB(0, 0, 0)
        TabBtn.TextSize = 14.000
        TabBtn.ZIndex = 6

        TabL.Name = "TabL"
        TabL.Parent = Tab
        TabL.SortOrder = Enum.SortOrder.LayoutOrder
        TabL.Padding = UDim.new(0, 4)

        -- Tab button hover effects
        TabBtn.MouseEnter:Connect(function()
            Tween(TabIco, {0.15, "Quint", "Out"}, {ImageTransparency = 0})
            Tween(TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0, TextColor3 = AccentColor})
        end)

        TabBtn.MouseLeave:Connect(function()
            if library.currentTab and library.currentTab[1] ~= TabIco then
                Tween(TabIco, {0.15, "Quint", "Out"}, {ImageTransparency = 0.2})
                Tween(TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0.2, TextColor3 = TextColor})
            end
        end)

        TabBtn.MouseButton1Click:Connect(function()
            spawn(function()
                Ripple(TabBtn, AccentColor, 1.2, 0.25)
            end)
            switchTab({TabIco, Tab})
        end)

        if library.currentTab == nil then
            switchTab({TabIco, Tab})
        end

        TabL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabL.AbsoluteContentSize.Y + 8)
        end)

        local tab = {}
        function tab.section(tab, name, TabVal)
            local Section = Instance.new("Frame")
            local SectionC = Instance.new("UICorner")
            local SectionText = Instance.new("TextLabel")
            local SectionOpen = Instance.new("ImageLabel")
            local SectionOpened = Instance.new("ImageLabel")
            local SectionToggle = Instance.new("ImageButton")
            local Objs = Instance.new("Frame")
            local ObjsL = Instance.new("UIListLayout")
            local SectionOutline = Instance.new("UIStroke")

            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = SecondaryColor
            Section.BackgroundTransparency = ElementTransparency
            Section.BorderSizePixel = 0
            Section.ClipsDescendants = true
            Section.Size = UDim2.new(0.981000006, 0, 0, 36)
            Section.ZIndex = 5
            
            -- Section outline
            SectionOutline.Color = Color3.fromRGB(60, 60, 80)
            SectionOutline.Thickness = 1
            SectionOutline.Transparency = 0.5
            SectionOutline.Parent = Section

            SectionC.CornerRadius = UDim.new(0, 8)
            SectionC.Name = "SectionC"
            SectionC.Parent = Section

            SectionText.Name = "SectionText"
            SectionText.Parent = Section
            SectionText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            SectionText.BackgroundTransparency = 1.000
            SectionText.Position = UDim2.new(0.0887396261, 0, 0, 0)
            SectionText.Size = UDim2.new(0, 401, 0, 36)
            SectionText.Font = Enum.Font.GothamSemibold
            SectionText.Text = name
            SectionText.TextColor3 = TextColor
            SectionText.TextSize = 16.000
            SectionText.TextXAlignment = Enum.TextXAlignment.Left
            SectionText.ZIndex = 6
            
            -- Text outline
            local sectionTextOutline = Instance.new("UIStroke", SectionText)
            sectionTextOutline.Color = Color3.fromRGB(0, 0, 0)
            sectionTextOutline.Thickness = 1
            sectionTextOutline.Transparency = 0.7

            SectionOpen.Name = "SectionOpen"
            SectionOpen.Parent = SectionText
            SectionOpen.BackgroundTransparency = 1
            SectionOpen.BorderSizePixel = 0
            SectionOpen.Position = UDim2.new(0, -33, 0, 5)
            SectionOpen.Size = UDim2.new(0, 26, 0, 26)
            SectionOpen.Image = "http://www.roblox.com/asset/?id=6031302934"
            SectionOpen.ImageColor3 = AccentColor
            SectionOpen.ZIndex = 6

            SectionOpened.Name = "SectionOpened"
            SectionOpened.Parent = SectionOpen
            SectionOpened.BackgroundTransparency = 1.000
            SectionOpened.BorderSizePixel = 0
            SectionOpened.Size = UDim2.new(0, 26, 0, 26)
            SectionOpened.Image = "http://www.roblox.com/asset/?id=6031302932"
            SectionOpened.ImageTransparency = 1.000
            SectionOpened.ImageColor3 = AccentColor
            SectionOpened.ZIndex = 6

            SectionToggle.Name = "SectionToggle"
            SectionToggle.Parent = SectionOpen
            SectionToggle.BackgroundTransparency = 1
            SectionToggle.BorderSizePixel = 0
            SectionToggle.Size = UDim2.new(0, 26, 0, 26)
            SectionToggle.ZIndex = 7

            Objs.Name = "Objs"
            Objs.Parent = Section
            Objs.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            Objs.BackgroundTransparency = 1
            Objs.BorderSizePixel = 0
            Objs.Position = UDim2.new(0, 6, 0, 36)
            Objs.Size = UDim2.new(0.986347735, 0, 0, 0)
            Objs.ZIndex = 5

            ObjsL.Name = "ObjsL"
            ObjsL.Parent = Objs
            ObjsL.SortOrder = Enum.SortOrder.LayoutOrder
            ObjsL.Padding = UDim.new(0, 8)

            local open = TabVal
            if TabVal ~= false then
                Section.Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
                SectionOpened.ImageTransparency = (open and 0 or 1)
                SectionOpen.ImageTransparency = (open and 1 or 0)
            end

            SectionToggle.MouseButton1Click:Connect(function()
                open = not open
                Tween(Section, {0.2, "Quint", "Out"}, {
                    Size = UDim2.new(0.981000006, 0, 0, open and 36 + ObjsL.AbsoluteContentSize.Y + 8 or 36)
                })
                Tween(SectionOpened, {0.2, "Quint", "Out"}, {ImageTransparency = (open and 0 or 1)})
                Tween(SectionOpen, {0.2, "Quint", "Out"}, {ImageTransparency = (open and 1 or 0)})
            end)

            ObjsL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if not open then
                    return
                end
                Section.Size = UDim2.new(0.981000006, 0, 0, 36 + ObjsL.AbsoluteContentSize.Y + 8)
            end)

            local section = {}
            
            function section.Button(section, text, callback)
                local callback = callback or function() end

                local BtnModule = Instance.new("Frame")
                local Btn = Instance.new("TextButton")
                local BtnC = Instance.new("UICorner")
                local BtnOutline = Instance.new("UIStroke")

                BtnModule.Name = "BtnModule"
                BtnModule.Parent = Objs
                BtnModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                BtnModule.BackgroundTransparency = 1.000
                BtnModule.BorderSizePixel = 0
                BtnModule.Position = UDim2.new(0, 0, 0, 0)
                BtnModule.Size = UDim2.new(0, 428, 0, 38)
                BtnModule.ZIndex = 6

                Btn.Name = "Btn"
                Btn.Parent = BtnModule
                Btn.BackgroundColor3 = SecondaryColor
                Btn.BackgroundTransparency = ElementTransparency
                Btn.BorderSizePixel = 0
                Btn.Size = UDim2.new(0, 428, 0, 38)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = "   " .. text
                Btn.TextColor3 = TextColor
                Btn.TextSize = 16.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                Btn.ZIndex = 7
                
                -- Button outline
                BtnOutline.Color = Color3.fromRGB(60, 60, 80)
                BtnOutline.Thickness = 1
                BtnOutline.Transparency = 0.5
                BtnOutline.Parent = Btn

                BtnC.CornerRadius = UDim.new(0, 8)
                BtnC.Name = "BtnC"
                BtnC.Parent = Btn

                -- Button hover effects
                Btn.MouseEnter:Connect(function()
                    Tween(Btn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(BtnOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                Btn.MouseLeave:Connect(function()
                    Tween(Btn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(BtnOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                Btn.MouseButton1Down:Connect(function()
                    Tween(Btn, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = ActiveTransparency,
                        TextColor3 = Color3.fromRGB(150, 200, 255)
                    })
                end)

                Btn.MouseButton1Up:Connect(function()
                    Tween(Btn, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                end)

                Btn.MouseButton1Click:Connect(function()
                    spawn(function()
                        Ripple(Btn, AccentColor, 1.2, 0.25)
                    end)
                    spawn(callback)
                end)
            end

            function section:Label(text)
                local LabelModule = Instance.new("Frame")
                local TextLabel = Instance.new("TextLabel")
                local LabelC = Instance.new("UICorner")
                local LabelOutline = Instance.new("UIStroke")

                LabelModule.Name = "LabelModule"
                LabelModule.Parent = Objs
                LabelModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                LabelModule.BackgroundTransparency = 1.000
                LabelModule.BorderSizePixel = 0
                LabelModule.Position = UDim2.new(0, 0, 0, 0)
                LabelModule.Size = UDim2.new(0, 428, 0, 22)
                LabelModule.ZIndex = 6

                TextLabel.Parent = LabelModule
                TextLabel.BackgroundColor3 = SecondaryColor
                TextLabel.BackgroundTransparency = ElementTransparency
                TextLabel.Size = UDim2.new(0, 428, 0, 22)
                TextLabel.Font = Enum.Font.GothamSemibold
                TextLabel.Text = text
                TextLabel.TextColor3 = TextColor
                TextLabel.TextSize = 14.000
                TextLabel.ZIndex = 7
                
                -- Label outline
                LabelOutline.Color = Color3.fromRGB(60, 60, 80)
                LabelOutline.Thickness = 1
                LabelOutline.Transparency = 0.5
                LabelOutline.Parent = TextLabel

                LabelC.CornerRadius = UDim.new(0, 6)
                LabelC.Name = "LabelC"
                LabelC.Parent = TextLabel
                
                return TextLabel
            end

            function section.Toggle(section, text, flag, enabled, callback)
                local callback = callback or function() end
                local enabled = enabled or false
                assert(text, "No text provided")
                assert(flag, "No flag provided")

                library.flags[flag] = enabled

                local ToggleModule = Instance.new("Frame")
                local ToggleBtn = Instance.new("TextButton")
                local ToggleBtnC = Instance.new("UICorner")
                local ToggleDisable = Instance.new("Frame")
                local ToggleSwitch = Instance.new("Frame")
                local ToggleSwitchC = Instance.new("UICorner")
                local ToggleDisableC = Instance.new("UICorner")
                local ToggleOutline = Instance.new("UIStroke")

                ToggleModule.Name = "ToggleModule"
                ToggleModule.Parent = Objs
                ToggleModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                ToggleModule.BackgroundTransparency = 1.000
                ToggleModule.BorderSizePixel = 0
                ToggleModule.Position = UDim2.new(0, 0, 0, 0)
                ToggleModule.Size = UDim2.new(0, 428, 0, 38)
                ToggleModule.ZIndex = 6

                ToggleBtn.Name = "ToggleBtn"
                ToggleBtn.Parent = ToggleModule
                ToggleBtn.BackgroundColor3 = SecondaryColor
                ToggleBtn.BackgroundTransparency = ElementTransparency
                ToggleBtn.BorderSizePixel = 0
                ToggleBtn.Size = UDim2.new(0, 428, 0, 38)
                ToggleBtn.AutoButtonColor = false
                ToggleBtn.Font = Enum.Font.GothamSemibold
                ToggleBtn.Text = "   " .. text
                ToggleBtn.TextColor3 = TextColor
                ToggleBtn.TextSize = 16.000
                ToggleBtn.TextXAlignment = Enum.TextXAlignment.Left
                ToggleBtn.ZIndex = 7
                
                -- Toggle outline
                ToggleOutline.Color = Color3.fromRGB(60, 60, 80)
                ToggleOutline.Thickness = 1
                ToggleOutline.Transparency = 0.5
                ToggleOutline.Parent = ToggleBtn

                ToggleBtnC.CornerRadius = UDim.new(0, 8)
                ToggleBtnC.Name = "ToggleBtnC"
                ToggleBtnC.Parent = ToggleBtn

                ToggleDisable.Name = "ToggleDisable"
                ToggleDisable.Parent = ToggleBtn
                ToggleDisable.BackgroundColor3 = Background
                ToggleDisable.BackgroundTransparency = ElementTransparency
                ToggleDisable.BorderSizePixel = 0
                ToggleDisable.Position = UDim2.new(0.901869178, 0, 0.208881587, 0)
                ToggleDisable.Size = UDim2.new(0, 36, 0, 22)
                ToggleDisable.ZIndex = 8

                ToggleSwitch.Name = "ToggleSwitch"
                ToggleSwitch.Parent = ToggleDisable
                ToggleSwitch.BackgroundColor3 = HoverColor
                ToggleSwitch.Size = UDim2.new(0, 24, 0, 22)
                ToggleSwitch.ZIndex = 9

                ToggleSwitchC.CornerRadius = UDim.new(0, 6)
                ToggleSwitchC.Name = "ToggleSwitchC"
                ToggleSwitchC.Parent = ToggleSwitch

                ToggleDisableC.CornerRadius = UDim.new(0, 6)
                ToggleDisableC.Name = "ToggleDisableC"
                ToggleDisableC.Parent = ToggleDisable

                local funcs = {
                    SetState = function(self, state)
                        if state == nil then
                            state = not library.flags[flag]
                        end
                        if library.flags[flag] == state then
                            return
                        end
                        
                        Tween(
                            ToggleSwitch,
                            TweenInfo.new(0.2, "Quint", "Out"),
                            {
                                Position = UDim2.new(0, (state and ToggleSwitch.Size.X.Offset / 2 or 0), 0, 0),
                                BackgroundColor3 = (state and AccentColor or HoverColor)
                            }
                        )
                        library.flags[flag] = state
                        callback(state)
                    end,
                    Module = ToggleModule
                }

                -- Toggle button hover effects
                ToggleBtn.MouseEnter:Connect(function()
                    Tween(ToggleBtn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(ToggleOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                ToggleBtn.MouseLeave:Connect(function()
                    Tween(ToggleBtn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(ToggleOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                ToggleBtn.MouseButton1Down:Connect(function()
                    Tween(ToggleBtn, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = ActiveTransparency,
                        TextColor3 = Color3.fromRGB(150, 200, 255)
                    })
                end)

                ToggleBtn.MouseButton1Up:Connect(function()
                    Tween(ToggleBtn, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                end)

                ToggleBtn.MouseButton1Click:Connect(function()
                    funcs:SetState()
                    spawn(function()
                        Ripple(ToggleBtn, AccentColor, 1.2, 0.25)
                    end)
                end)
                
                if enabled ~= false then
                    funcs:SetState(true)
                end
                
                return funcs
            end

            function section.Keybind(section, text, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(default, "No default key provided")

                local default = (typeof(default) == "string" and Enum.KeyCode[default] or default)
                local banned = {
                    Return = true,
                    Space = true,
                    Tab = true,
                    Backquote = true,
                    CapsLock = true,
                    Escape = true,
                    Unknown = true
                }
                local shortNames = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt"
                }

                local bindKey = default
                local keyTxt = (default and (shortNames[default.Name] or default.Name) or "None")

                local KeybindModule = Instance.new("Frame")
                local KeybindBtn = Instance.new("TextButton")
                local KeybindBtnC = Instance.new("UICorner")
                local KeybindValue = Instance.new("TextButton")
                local KeybindValueC = Instance.new("UICorner")
                local KeybindL = Instance.new("UIListLayout")
                local UIPadding = Instance.new("UIPadding")
                local KeybindOutline = Instance.new("UIStroke")
                local KeybindValueOutline = Instance.new("UIStroke")

                KeybindModule.Name = "KeybindModule"
                KeybindModule.Parent = Objs
                KeybindModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindModule.BackgroundTransparency = 1.000
                KeybindModule.BorderSizePixel = 0
                KeybindModule.Position = UDim2.new(0, 0, 0, 0)
                KeybindModule.Size = UDim2.new(0, 428, 0, 38)
                KeybindModule.ZIndex = 6

                KeybindBtn.Name = "KeybindBtn"
                KeybindBtn.Parent = KeybindModule
                KeybindBtn.BackgroundColor3 = SecondaryColor
                KeybindBtn.BackgroundTransparency = ElementTransparency
                KeybindBtn.BorderSizePixel = 0
                KeybindBtn.Size = UDim2.new(0, 428, 0, 38)
                KeybindBtn.AutoButtonColor = false
                KeybindBtn.Font = Enum.Font.GothamSemibold
                KeybindBtn.Text = "   " .. text
                KeybindBtn.TextColor3 = TextColor
                KeybindBtn.TextSize = 16.000
                KeybindBtn.TextXAlignment = Enum.TextXAlignment.Left
                KeybindBtn.ZIndex = 7
                
                -- Keybind outline
                KeybindOutline.Color = Color3.fromRGB(60, 60, 80)
                KeybindOutline.Thickness = 1
                KeybindOutline.Transparency = 0.5
                KeybindOutline.Parent = KeybindBtn

                KeybindBtnC.CornerRadius = UDim.new(0, 8)
                KeybindBtnC.Name = "KeybindBtnC"
                KeybindBtnC.Parent = KeybindBtn

                KeybindValue.Name = "KeybindValue"
                KeybindValue.Parent = KeybindBtn
                KeybindValue.BackgroundColor3 = Background
                KeybindValue.BackgroundTransparency = ElementTransparency
                KeybindValue.BorderSizePixel = 0
                KeybindValue.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                KeybindValue.Size = UDim2.new(0, 100, 0, 28)
                KeybindValue.AutoButtonColor = false
                KeybindValue.Font = Enum.Font.Gotham
                KeybindValue.Text = keyTxt
                KeybindValue.TextColor3 = TextColor
                KeybindValue.TextSize = 14.000
                KeybindValue.ZIndex = 8
                
                -- Value outline
                KeybindValueOutline.Color = Color3.fromRGB(60, 60, 80)
                KeybindValueOutline.Thickness = 1
                KeybindValueOutline.Transparency = 0.5
                KeybindValueOutline.Parent = KeybindValue

                KeybindValueC.CornerRadius = UDim.new(0, 6)
                KeybindValueC.Name = "KeybindValueC"
                KeybindValueC.Parent = KeybindValue

                KeybindL.Name = "KeybindL"
                KeybindL.Parent = KeybindBtn
                KeybindL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                KeybindL.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindL.VerticalAlignment = Enum.VerticalAlignment.Center

                UIPadding.Parent = KeybindBtn
                UIPadding.PaddingRight = UDim.new(0, 6)

                -- Keybind button hover effects
                KeybindBtn.MouseEnter:Connect(function()
                    Tween(KeybindBtn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(KeybindOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                KeybindBtn.MouseLeave:Connect(function()
                    Tween(KeybindBtn, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(KeybindOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                KeybindValue.MouseEnter:Connect(function()
                    Tween(KeybindValue, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(KeybindValueOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                KeybindValue.MouseLeave:Connect(function()
                    Tween(KeybindValue, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(KeybindValueOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                KeybindValue.MouseButton1Down:Connect(function()
                    Tween(KeybindValue, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = ActiveTransparency,
                        TextColor3 = Color3.fromRGB(150, 200, 255)
                    })
                end)

                KeybindValue.MouseButton1Up:Connect(function()
                    Tween(KeybindValue, {0.1, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                end)

                services.UserInputService.InputBegan:Connect(function(inp, gpe)
                    if gpe then
                        return
                    end
                    if inp.UserInputType ~= Enum.UserInputType.Keyboard then
                        return
                    end
                    if inp.KeyCode ~= bindKey then
                        return
                    end
                    callback(bindKey.Name)
                end)

                KeybindValue.MouseButton1Click:Connect(function()
                    KeybindValue.Text = "..."
                    Tween(KeybindValue, {0.2, "Quint", "Out"}, {
                        TextColor3 = AccentColor
                    })
                    
                    local key, uwu = services.UserInputService.InputEnded:Wait()
                    local keyName = tostring(key.KeyCode.Name)
                    
                    Tween(KeybindValue, {0.2, "Quint", "Out"}, {
                        TextColor3 = TextColor
                    })
                    
                    if key.UserInputType ~= Enum.UserInputType.Keyboard then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    if banned[keyName] then
                        KeybindValue.Text = keyTxt
                        return
                    end
                    
                    bindKey = Enum.KeyCode[keyName]
                    KeybindValue.Text = shortNames[keyName] or keyName
                end)

                KeybindValue:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
                end)
                KeybindValue.Size = UDim2.new(0, KeybindValue.TextBounds.X + 30, 0, 28)
            end

            function section.Textbox(section, text, flag, default, callback)
                local callback = callback or function() end
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default text provided")

                library.flags[flag] = default

                local TextboxModule = Instance.new("Frame")
                local TextboxBack = Instance.new("TextButton")
                local TextboxBackC = Instance.new("UICorner")
                local BoxBG = Instance.new("TextButton")
                local BoxBGC = Instance.new("UICorner")
                local TextBox = Instance.new("TextBox")
                local TextboxBackL = Instance.new("UIListLayout")
                local TextboxBackP = Instance.new("UIPadding")
                local TextboxOutline = Instance.new("UIStroke")
                local BoxOutline = Instance.new("UIStroke")

                TextboxModule.Name = "TextboxModule"
                TextboxModule.Parent = Objs
                TextboxModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextboxModule.BackgroundTransparency = 1.000
                TextboxModule.BorderSizePixel = 0
                TextboxModule.Position = UDim2.new(0, 0, 0, 0)
                TextboxModule.Size = UDim2.new(0, 428, 0, 38)
                TextboxModule.ZIndex = 6

                TextboxBack.Name = "TextboxBack"
                TextboxBack.Parent = TextboxModule
                TextboxBack.BackgroundColor3 = SecondaryColor
                TextboxBack.BackgroundTransparency = ElementTransparency
                TextboxBack.BorderSizePixel = 0
                TextboxBack.Size = UDim2.new(0, 428, 0, 38)
                TextboxBack.AutoButtonColor = false
                TextboxBack.Font = Enum.Font.GothamSemibold
                TextboxBack.Text = "   " .. text
                TextboxBack.TextColor3 = TextColor
                TextboxBack.TextSize = 16.000
                TextboxBack.TextXAlignment = Enum.TextXAlignment.Left
                TextboxBack.ZIndex = 7
                
                -- Textbox outline
                TextboxOutline.Color = Color3.fromRGB(60, 60, 80)
                TextboxOutline.Thickness = 1
                TextboxOutline.Transparency = 0.5
                TextboxOutline.Parent = TextboxBack

                TextboxBackC.CornerRadius = UDim.new(0, 6)
                TextboxBackC.Name = "TextboxBackC"
                TextboxBackC.Parent = TextboxBack

                BoxBG.Name = "BoxBG"
                BoxBG.Parent = TextboxBack
                BoxBG.BackgroundColor3 = Background
                BoxBG.BackgroundTransparency = ElementTransparency
                BoxBG.BorderSizePixel = 0
                BoxBG.Position = UDim2.new(0.763033211, 0, 0.289473683, 0)
                BoxBG.Size = UDim2.new(0, 100, 0, 28)
                BoxBG.AutoButtonColor = false
                BoxBG.Font = Enum.Font.Gotham
                BoxBG.Text = ""
                BoxBG.TextColor3 = TextColor
                BoxBG.TextSize = 14.000
                BoxBG.ZIndex = 8
                
                -- Box outline
                BoxOutline.Color = Color3.fromRGB(60, 60, 80)
                BoxOutline.Thickness = 1
                BoxOutline.Transparency = 0.5
                BoxOutline.Parent = BoxBG

                BoxBGC.CornerRadius = UDim.new(0, 6)
                BoxBGC.Name = "BoxBGC"
                BoxBGC.Parent = BoxBG

                TextBox.Parent = BoxBG
                TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                TextBox.BackgroundTransparency = 1.000
                TextBox.BorderSizePixel = 0
                TextBox.Size = UDim2.new(1, 0, 1, 0)
                TextBox.Font = Enum.Font.Gotham
                TextBox.Text = default
                TextBox.TextColor3 = TextColor
                TextBox.TextSize = 14.000
                TextBox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
                TextBox.ZIndex = 9

                TextboxBackL.Name = "TextboxBackL"
                TextboxBackL.Parent = TextboxBack
                TextboxBackL.HorizontalAlignment = Enum.HorizontalAlignment.Right
                TextboxBackL.SortOrder = Enum.SortOrder.LayoutOrder
                TextboxBackL.VerticalAlignment = Enum.VerticalAlignment.Center

                TextboxBackP.Name = "TextboxBackP"
                TextboxBackP.Parent = TextboxBack
                TextboxBackP.PaddingRight = UDim.new(0, 6)

                -- Textbox hover effects
                TextboxBack.MouseEnter:Connect(function()
                    Tween(TextboxBack, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(TextboxOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                TextboxBack.MouseLeave:Connect(function()
                    Tween(TextboxBack, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(TextboxOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                BoxBG.MouseEnter:Connect(function()
                    Tween(BoxBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency
                    })
                    Tween(BoxOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                BoxBG.MouseLeave:Connect(function()
                    Tween(BoxBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency
                    })
                    Tween(BoxOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                TextBox.Focused:Connect(function()
                    Tween(BoxBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ActiveTransparency
                    })
                    Tween(BoxOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.2
                    })
                end)

                TextBox.FocusLost:Connect(function()
                    if TextBox.Text == "" then
                        TextBox.Text = default
                    end
                    library.flags[flag] = TextBox.Text
                    callback(TextBox.Text)
                    
                    Tween(BoxBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency
                    })
                    Tween(BoxOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                TextBox:GetPropertyChangedSignal("TextBounds"):Connect(function()
                    BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
                end)
                BoxBG.Size = UDim2.new(0, TextBox.TextBounds.X + 30, 0, 28)
            end

            function section.Slider(section, text, flag, default, min, max, precise, callback)
                local callback = callback or function() end
                local min = min or 1
                local max = max or 10
                local default = default or min
                local precise = precise or false

                library.flags[flag] = default

                assert(text, "No text provided")
                assert(flag, "No flag provided")
                assert(default, "No default value provided")

                local SliderModule = Instance.new("Frame")
                local SliderBack = Instance.new("TextButton")
                local SliderBackC = Instance.new("UICorner")
                local SliderBar = Instance.new("Frame")
                local SliderBarC = Instance.new("UICorner")
                local SliderPart = Instance.new("Frame")
                local SliderPartC = Instance.new("UICorner")
                local SliderValBG = Instance.new("TextButton")
                local SliderValBGC = Instance.new("UICorner")
                local SliderValue = Instance.new("TextBox")
                local MinSlider = Instance.new("TextButton")
                local AddSlider = Instance.new("TextButton")
                local SliderOutline = Instance.new("UIStroke")
                local SliderBarOutline = Instance.new("UIStroke")
                local SliderValueOutline = Instance.new("UIStroke")

                SliderModule.Name = "SliderModule"
                SliderModule.Parent = Objs
                SliderModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderModule.BackgroundTransparency = 1.000
                SliderModule.BorderSizePixel = 0
                SliderModule.Position = UDim2.new(0, 0, 0, 0)
                SliderModule.Size = UDim2.new(0, 428, 0, 38)
                SliderModule.ZIndex = 6

                SliderBack.Name = "SliderBack"
                SliderBack.Parent = SliderModule
                SliderBack.BackgroundColor3 = SecondaryColor
                SliderBack.BackgroundTransparency = ElementTransparency
                SliderBack.BorderSizePixel = 0
                SliderBack.Size = UDim2.new(0, 428, 0, 38)
                SliderBack.AutoButtonColor = false
                SliderBack.Font = Enum.Font.GothamSemibold
                SliderBack.Text = "   " .. text
                SliderBack.TextColor3 = TextColor
                SliderBack.TextSize = 16.000
                SliderBack.TextXAlignment = Enum.TextXAlignment.Left
                SliderBack.ZIndex = 7
                
                -- Slider outline
                SliderOutline.Color = Color3.fromRGB(60, 60, 80)
                SliderOutline.Thickness = 1
                SliderOutline.Transparency = 0.5
                SliderOutline.Parent = SliderBack

                SliderBackC.CornerRadius = UDim.new(0, 6)
                SliderBackC.Name = "SliderBackC"
                SliderBackC.Parent = SliderBack

                SliderBar.Name = "SliderBar"
                SliderBar.Parent = SliderBack
                SliderBar.AnchorPoint = Vector2.new(0, 0.5)
                SliderBar.BackgroundColor3 = Background
                SliderBar.BackgroundTransparency = ElementTransparency
                SliderBar.BorderSizePixel = 0
                SliderBar.Position = UDim2.new(0.369000018, 40, 0.5, 0)
                SliderBar.Size = UDim2.new(0, 140, 0, 12)
                SliderBar.ZIndex = 8
                
                -- Slider bar outline
                SliderBarOutline.Color = Color3.fromRGB(60, 60, 80)
                SliderBarOutline.Thickness = 1
                SliderBarOutline.Transparency = 0.5
                SliderBarOutline.Parent = SliderBar

                SliderBarC.CornerRadius = UDim.new(0, 4)
                SliderBarC.Name = "SliderBarC"
                SliderBarC.Parent = SliderBar

                SliderPart.Name = "SliderPart"
                SliderPart.Parent = SliderBar
                SliderPart.BackgroundColor3 = AccentColor
                SliderPart.BorderSizePixel = 0
                SliderPart.Size = UDim2.new(0, 54, 0, 13)
                SliderPart.ZIndex = 9

                SliderPartC.CornerRadius = UDim.new(0, 4)
                SliderPartC.Name = "SliderPartC"
                SliderPartC.Parent = SliderPart

                SliderValBG.Name = "SliderValBG"
                SliderValBG.Parent = SliderBack
                SliderValBG.BackgroundColor3 = Background
                SliderValBG.BackgroundTransparency = ElementTransparency
                SliderValBG.BorderSizePixel = 0
                SliderValBG.Position = UDim2.new(0.883177578, 0, 0.131578952, 0)
                SliderValBG.Size = UDim2.new(0, 44, 0, 28)
                SliderValBG.AutoButtonColor = false
                SliderValBG.Font = Enum.Font.Gotham
                SliderValBG.Text = ""
                SliderValBG.TextColor3 = TextColor
                SliderValBG.TextSize = 14.000
                SliderValBG.ZIndex = 8
                
                -- Value box outline
                SliderValueOutline.Color = Color3.fromRGB(60, 60, 80)
                SliderValueOutline.Thickness = 1
                SliderValueOutline.Transparency = 0.5
                SliderValueOutline.Parent = SliderValBG

                SliderValBGC.CornerRadius = UDim.new(0, 6)
                SliderValBGC.Name = "SliderValBGC"
                SliderValBGC.Parent = SliderValBG

                SliderValue.Name = "SliderValue"
                SliderValue.Parent = SliderValBG
                SliderValue.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                SliderValue.BackgroundTransparency = 1.000
                SliderValue.BorderSizePixel = 0
                SliderValue.Size = UDim2.new(1, 0, 1, 0)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = "1000"
                SliderValue.TextColor3 = TextColor
                SliderValue.TextSize = 14.000
                SliderValue.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
                SliderValue.ZIndex = 9

                MinSlider.Name = "MinSlider"
                MinSlider.Parent = SliderModule
                MinSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                MinSlider.BackgroundTransparency = 1.000
                MinSlider.BorderSizePixel = 0
                MinSlider.Position = UDim2.new(0.296728969, 40, 0.236842096, 0)
                MinSlider.Size = UDim2.new(0, 20, 0, 20)
                MinSlider.Font = Enum.Font.Gotham
                MinSlider.Text = "-"
                MinSlider.TextColor3 = TextColor
                MinSlider.TextSize = 24.000
                MinSlider.TextWrapped = true
                MinSlider.ZIndex = 8

                AddSlider.Name = "AddSlider"
                AddSlider.Parent = SliderModule
                AddSlider.AnchorPoint = Vector2.new(0, 0.5)
                AddSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                AddSlider.BackgroundTransparency = 1.000
                AddSlider.BorderSizePixel = 0
                AddSlider.Position = UDim2.new(0.810906529, 0, 0.5, 0)
                AddSlider.Size = UDim2.new(0, 20, 0, 20)
                AddSlider.Font = Enum.Font.Gotham
                AddSlider.Text = "+"
                AddSlider.TextColor3 = TextColor
                AddSlider.TextSize = 24.000
                AddSlider.TextWrapped = true
                AddSlider.ZIndex = 8

                -- Slider hover effects
                SliderBack.MouseEnter:Connect(function()
                    Tween(SliderBack, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(SliderOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                SliderBack.MouseLeave:Connect(function()
                    Tween(SliderBack, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(SliderOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                SliderValBG.MouseEnter:Connect(function()
                    Tween(SliderValBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency
                    })
                    Tween(SliderValueOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                SliderValBG.MouseLeave:Connect(function()
                    Tween(SliderValBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency
                    })
                    Tween(SliderValueOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                SliderValue.Focused:Connect(function()
                    Tween(SliderValBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ActiveTransparency
                    })
                    Tween(SliderValueOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.2
                    })
                end)

                SliderValue.FocusLost:Connect(function()
                    Tween(SliderValBG, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency
                    })
                    Tween(SliderValueOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                MinSlider.MouseEnter:Connect(function()
                    Tween(MinSlider, {0.2, "Quint", "Out"}, {
                        TextColor3 = AccentColor
                    })
                end)

                MinSlider.MouseLeave:Connect(function()
                    Tween(MinSlider, {0.2, "Quint", "Out"}, {
                        TextColor3 = TextColor
                    })
                end)

                AddSlider.MouseEnter:Connect(function()
                    Tween(AddSlider, {0.2, "Quint", "Out"}, {
                        TextColor3 = AccentColor
                    })
                end)

                AddSlider.MouseLeave:Connect(function()
                    Tween(AddSlider, {0.2, "Quint", "Out"}, {
                        TextColor3 = TextColor
                    })
                end)

                local funcs = {
                    SetValue = function(self, value)
                        local percent = (mouse.X - SliderBar.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
                        if value then
                            percent = (value - min) / (max - min)
                        end
                        percent = math.clamp(percent, 0, 1)
                        if precise then
                            value = value or tonumber(string.format("%.1f", tostring(min + (max - min) * percent)))
                        else
                            value = value or math.floor(min + (max - min) * percent)
                        end
                        library.flags[flag] = tonumber(value)
                        SliderValue.Text = tostring(value)
                        
                        Tween(
                            SliderPart,
                            TweenInfo.new(0.2, "Quint", "Out"),
                            {
                                Size = UDim2.new(percent, 0, 1, 0)
                            }
                        )
                        callback(tonumber(value))
                    end
                }

                MinSlider.MouseButton1Click:Connect(function()
                    local currentValue = library.flags[flag]
                    currentValue = math.clamp(currentValue - 1, min, max)
                    funcs:SetValue(currentValue)
                    spawn(function()
                        Ripple(MinSlider, AccentColor, 0.8, 0.2)
                    end)
                end)

                AddSlider.MouseButton1Click:Connect(function()
                    local currentValue = library.flags[flag]
                    currentValue = math.clamp(currentValue + 1, min, max)
                    funcs:SetValue(currentValue)
                    spawn(function()
                        Ripple(AddSlider, AccentColor, 0.8, 0.2)
                    end)
                end)

                funcs:SetValue(default)

                local dragging, boxFocused, allowed = false, false, {[""] = true, ["-"] = true}

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        funcs:SetValue()
                    end
                end)

                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        funcs:SetValue()
                    end
                end)

                SliderBar.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                        funcs:SetValue()
                    end
                end)

                services.UserInputService.InputEnded:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.Touch then
                        funcs:SetValue()
                    end
                end)

                SliderValue.Focused:Connect(function()
                    boxFocused = true
                end)

                SliderValue.FocusLost:Connect(function()
                    boxFocused = false
                    if SliderValue.Text == "" then
                        funcs:SetValue(default)
                    end
                end)

                SliderValue:GetPropertyChangedSignal("Text"):Connect(function()
                    if not boxFocused then
                        return
                    end
                    SliderValue.Text = SliderValue.Text:gsub("%D+", "")

                    local text = SliderValue.Text

                    if not tonumber(text) then
                        SliderValue.Text = SliderValue.Text:gsub("%D+", "")
                    elseif not allowed[text] then
                        if tonumber(text) > max then
                            text = max
                            SliderValue.Text = tostring(max)
                        end
                        funcs:SetValue(tonumber(text))
                    end
                end)

                return funcs
            end
            
            function section.Dropdown(section, text, flag, options, callback)
                local callback = callback or function() end
                local options = options or {}
                assert(text, "No text provided")
                assert(flag, "No flag provided")

                library.flags[flag] = nil

                local DropdownModule = Instance.new("Frame")
                local DropdownTop = Instance.new("TextButton")
                local DropdownTopC = Instance.new("UICorner")
                local DropdownOpen = Instance.new("TextButton")
                local DropdownText = Instance.new("TextBox")
                local DropdownModuleL = Instance.new("UIListLayout")
                local DropdownOutline = Instance.new("UIStroke")
                local DropdownTopOutline = Instance.new("UIStroke")

                DropdownModule.Name = "DropdownModule"
                DropdownModule.Parent = Objs
                DropdownModule.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownModule.BackgroundTransparency = 1.000
                DropdownModule.BorderSizePixel = 0
                DropdownModule.ClipsDescendants = true
                DropdownModule.Position = UDim2.new(0, 0, 0, 0)
                DropdownModule.Size = UDim2.new(0, 428, 0, 38)
                DropdownModule.ZIndex = 6

                DropdownTop.Name = "DropdownTop"
                DropdownTop.Parent = DropdownModule
                DropdownTop.BackgroundColor3 = SecondaryColor
                DropdownTop.BackgroundTransparency = ElementTransparency
                DropdownTop.BorderSizePixel = 0
                DropdownTop.Size = UDim2.new(0, 428, 0, 38)
                DropdownTop.AutoButtonColor = false
                DropdownTop.Font = Enum.Font.GothamSemibold
                DropdownTop.Text = ""
                DropdownTop.TextColor3 = TextColor
                DropdownTop.TextSize = 16.000
                DropdownTop.TextXAlignment = Enum.TextXAlignment.Left
                DropdownTop.ZIndex = 7
                
                -- Dropdown outline
                DropdownOutline.Color = Color3.fromRGB(60, 60, 80)
                DropdownOutline.Thickness = 1
                DropdownOutline.Transparency = 0.5
                DropdownOutline.Parent = DropdownTop

                DropdownTopC.CornerRadius = UDim.new(0, 6)
                DropdownTopC.Name = "DropdownTopC"
                DropdownTopC.Parent = DropdownTop

                DropdownOpen.Name = "DropdownOpen"
                DropdownOpen.Parent = DropdownTop
                DropdownOpen.AnchorPoint = Vector2.new(0, 0.5)
                DropdownOpen.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownOpen.BackgroundTransparency = 1.000
                DropdownOpen.BorderSizePixel = 0
                DropdownOpen.Position = UDim2.new(0.918383181, 0, 0.5, 0)
                DropdownOpen.Size = UDim2.new(0, 20, 0, 20)
                DropdownOpen.Font = Enum.Font.Gotham
                DropdownOpen.Text = "+"
                DropdownOpen.TextColor3 = TextColor
                DropdownOpen.TextSize = 24.000
                DropdownOpen.TextWrapped = true
                DropdownOpen.ZIndex = 8

                DropdownText.Name = "DropdownText"
                DropdownText.Parent = DropdownTop
                DropdownText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                DropdownText.BackgroundTransparency = 1.000
                DropdownText.BorderSizePixel = 0
                DropdownText.Position = UDim2.new(0.0373831764, 0, 0, 0)
                DropdownText.Size = UDim2.new(0, 184, 0, 38)
                DropdownText.Font = Enum.Font.GothamSemibold
                DropdownText.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
                DropdownText.PlaceholderText = text
                DropdownText.Text = ""
                DropdownText.TextColor3 = TextColor
                DropdownText.TextSize = 16.000
                DropdownText.TextXAlignment = Enum.TextXAlignment.Left
                DropdownText.ZIndex = 8

                DropdownModuleL.Name = "DropdownModuleL"
                DropdownModuleL.Parent = DropdownModule
                DropdownModuleL.SortOrder = Enum.SortOrder.LayoutOrder
                DropdownModuleL.Padding = UDim.new(0, 4)

                -- Dropdown hover effects
                DropdownTop.MouseEnter:Connect(function()
                    Tween(DropdownTop, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = HoverTransparency,
                        TextColor3 = AccentColor
                    })
                    Tween(DropdownOutline, {0.2, "Quint", "Out"}, {
                        Color = AccentColor,
                        Transparency = 0.3
                    })
                end)

                DropdownTop.MouseLeave:Connect(function()
                    Tween(DropdownTop, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = ElementTransparency,
                        TextColor3 = TextColor
                    })
                    Tween(DropdownOutline, {0.2, "Quint", "Out"}, {
                        Color = Color3.fromRGB(60, 60, 80),
                        Transparency = 0.5
                    })
                end)

                DropdownOpen.MouseEnter:Connect(function()
                    Tween(DropdownOpen, {0.2, "Quint", "Out"}, {
                        TextColor3 = AccentColor
                    })
                end)

                DropdownOpen.MouseLeave:Connect(function()
                    Tween(DropdownOpen, {0.2, "Quint", "Out"}, {
                        TextColor3 = TextColor
                    })
                end)

                DropdownText.Focused:Connect(function()
                    Tween(DropdownText, {0.2, "Quint", "Out"}, {
                        TextColor3 = AccentColor
                    })
                end)

                DropdownText.FocusLost:Connect(function()
                    Tween(DropdownText, {0.2, "Quint", "Out"}, {
                        TextColor3 = TextColor
                    })
                end)

                local setAllVisible = function()
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if option:IsA("TextButton") and option.Name:match("Option_") then
                            option.Visible = true
                        end
                    end
                end

                local searchDropdown = function(text)
                    local options = DropdownModule:GetChildren()
                    for i = 1, #options do
                        local option = options[i]
                        if text == "" then
                            setAllVisible()
                        else
                            if option:IsA("TextButton") and option.Name:match("Option_") then
                                if option.Text:lower():match(text:lower()) then
                                    option.Visible = true
                                else
                                    option.Visible = false
                                end
                            end
                        end
                    end
                end

                local open = false
                local ToggleDropVis = function()
                    open = not open
                    if open then
                        setAllVisible()
                    end
                    DropdownOpen.Text = (open and "-" or "+")
                    Tween(DropdownModule, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(0, 428, 0, (open and DropdownModuleL.AbsoluteContentSize.Y + 4 or 38))
                    })
                end

                DropdownOpen.MouseButton1Click:Connect(ToggleDropVis)
                DropdownText.Focused:Connect(function()
                    if open then
                        return
                    end
                    ToggleDropVis()
                end)

                DropdownText:GetPropertyChangedSignal("Text"):Connect(function()
                    if not open then
                        return
                    end
                    searchDropdown(DropdownText.Text)
                end)

                DropdownModuleL:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    if not open then
                        return
                    end
                    Tween(DropdownModule, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(0, 428, 0, (DropdownModuleL.AbsoluteContentSize.Y + 4))
                    })
                end)

                local funcs = {}
                funcs.AddOption = function(self, option)
                    local Option = Instance.new("TextButton")
                    local OptionC = Instance.new("UICorner")
                    local OptionOutline = Instance.new("UIStroke")

                    Option.Name = "Option_" .. option
                    Option.Parent = DropdownModule
                    Option.BackgroundColor3 = SecondaryColor
                    Option.BackgroundTransparency = ElementTransparency
                    Option.BorderSizePixel = 0
                    Option.Position = UDim2.new(0, 0, 0.328125, 0)
                    Option.Size = UDim2.new(0, 428, 0, 26)
                    Option.AutoButtonColor = false
                    Option.Font = Enum.Font.Gotham
                    Option.Text = option
                    Option.TextColor3 = TextColor
                    Option.TextSize = 14.000
                    Option.ZIndex = 8
                    
                    -- Option outline
                    OptionOutline.Color = Color3.fromRGB(60, 60, 80)
                    OptionOutline.Thickness = 1
                    OptionOutline.Transparency = 0.5
                    OptionOutline.Parent = Option

                    OptionC.CornerRadius = UDim.new(0, 6)
                    OptionC.Name = "OptionC"
                    OptionC.Parent = Option

                    -- Option hover effects
                    Option.MouseEnter:Connect(function()
                        Tween(Option, {0.2, "Quint", "Out"}, {
                            BackgroundTransparency = HoverTransparency,
                            TextColor3 = AccentColor
                        })
                        Tween(OptionOutline, {0.2, "Quint", "Out"}, {
                            Color = AccentColor,
                            Transparency = 0.3
                        })
                    end)

                    Option.MouseLeave:Connect(function()
                        Tween(Option, {0.2, "Quint", "Out"}, {
                            BackgroundTransparency = ElementTransparency,
                            TextColor3 = TextColor
                        })
                        Tween(OptionOutline, {0.2, "Quint", "Out"}, {
                            Color = Color3.fromRGB(60, 60, 80),
                            Transparency = 0.5
                        })
                    end)

                    Option.MouseButton1Down:Connect(function()
                        Tween(Option, {0.1, "Quint", "Out"}, {
                            BackgroundTransparency = ActiveTransparency,
                            TextColor3 = Color3.fromRGB(150, 200, 255)
                        })
                    end)

                    Option.MouseButton1Up:Connect(function()
                        Tween(Option, {0.1, "Quint", "Out"}, {
                            BackgroundTransparency = HoverTransparency,
                            TextColor3 = AccentColor
                        })
                    end)

                    Option.MouseButton1Click:Connect(function()
                        ToggleDropVis()
                        callback(Option.Text)
                        DropdownText.Text = Option.Text
                        library.flags[flag] = Option.Text
                        spawn(function()
                            Ripple(Option, AccentColor, 1, 0.2)
                        end)
                    end)
                end

                funcs.RemoveOption = function(self, option)
                    local option = DropdownModule:FindFirstChild("Option_" .. option)
                    if option then
                        option:Destroy()
                    end
                end

                funcs.SetOptions = function(self, options)
                    for _, v in next, DropdownModule:GetChildren() do
                        if v.Name:match("Option_") then
                            v:Destroy()
                        end
                    end
                    for _, v in next, options do
                        funcs:AddOption(v)
                    end
                end

                funcs:SetOptions(options)

                return funcs
            end
            return section
        end
        return tab
    end
    return window
end
return library
