-- SnowGui - 暗黑风格UI库
-- 作者: AI助手
-- 版本: 1.0

local libSnowGui = {}

-- 等待游戏加载完成
repeat task.wait() until game:IsLoaded()

-- 全局配置
libSnowGui.config = {
    darkMode = true,
    accentColor = Color3.fromRGB(100, 150, 255),
    backgroundColor = Color3.fromRGB(20, 20, 30),
    secondaryColor = Color3.fromRGB(30, 30, 40),
    textColor = Color3.fromRGB(255, 255, 255),
    transparency = 0.3,
    hoverTransparency = 0.1,
    animationSpeed = 0.2,
    cornerRadius = UDim.new(0, 8),
    shadowIntensity = 0.5,
    blurIntensity = 0.5
}

-- 内部状态
libSnowGui.currentTab = nil
libSnowGui.flags = {}
libSnowGui.toggled = false
libSnowGui.switchingTabs = false

-- 服务快捷访问
local services = setmetatable({}, {
    __index = function(t, k)
        return game:GetService(k)
    end
})

-- 鼠标对象
local mouse = services.Players.LocalPlayer:GetMouse()

-- 动画工具函数
function libSnowGui.Tween(obj, t, data)
    services.TweenService:Create(
        obj, 
        TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), 
        data
    ):Play()
    return true
end

-- 波纹效果
function libSnowGui.Ripple(obj)
    spawn(function()
        if obj.ClipsDescendants ~= true then
            obj.ClipsDescendants = true
        end
        
        local Ripple = Instance.new("ImageLabel")
        Ripple.Name = "Ripple"
        Ripple.Parent = obj
        Ripple.BackgroundTransparency = 1
        Ripple.ZIndex = 8
        Ripple.Image = "rbxassetid://2708891598"
        Ripple.ImageTransparency = 0.8
        Ripple.ScaleType = Enum.ScaleType.Fit
        Ripple.ImageColor3 = libSnowGui.config.textColor
        
        local posX = (mouse.X - Ripple.AbsolutePosition.X) / obj.AbsoluteSize.X
        local posY = (mouse.Y - Ripple.AbsolutePosition.Y) / obj.AbsoluteSize.Y
        Ripple.Position = UDim2.new(posX, 0, posY, 0)
        
        -- 波纹动画
        libSnowGui.Tween(Ripple, {0.3, "Linear", "InOut"}, {
            Position = UDim2.new(-5.5, 0, -5.5, 0), 
            Size = UDim2.new(12, 0, 12, 0)
        })
        
        task.wait(0.15)
        libSnowGui.Tween(Ripple, {0.3, "Linear", "InOut"}, {ImageTransparency = 1})
        task.wait(0.3)
        Ripple:Destroy()
    end)
end

-- 切换标签页
function libSnowGui.switchTab(new)
    if libSnowGui.switchingTabs then return end
    
    local old = libSnowGui.currentTab
    if old == nil then
        new[2].Visible = true
        libSnowGui.currentTab = new
        libSnowGui.Tween(new[1], {0.1, "Linear", "InOut"}, {ImageTransparency = 0})
        libSnowGui.Tween(new[1].TabText, {0.1, "Linear", "InOut"}, {TextTransparency = 0})
        return
    end

    if old[1] == new[1] then return end
    
    libSnowGui.switchingTabs = true
    libSnowGui.currentTab = new

    -- 旧标签淡出
    libSnowGui.Tween(old[1], {0.1, "Linear", "InOut"}, {ImageTransparency = 0.2})
    libSnowGui.Tween(old[1].TabText, {0.1, "Linear", "InOut"}, {TextTransparency = 0.2})
    
    -- 新标签淡入
    libSnowGui.Tween(new[1], {0.1, "Linear", "InOut"}, {ImageTransparency = 0})
    libSnowGui.Tween(new[1].TabText, {0.1, "Linear", "InOut"}, {TextTransparency = 0})

    -- 切换可见性
    old[2].Visible = false
    new[2].Visible = true

    task.wait(0.1)
    libSnowGui.switchingTabs = false
end

-- 拖拽功能
function libSnowGui.drag(frame, hold)
    if not hold then hold = frame end
    
    local dragging, dragInput, dragStart, startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        frame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end

    hold.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    services.UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- 创建新UI
function libSnowGui.new(name, theme)
    -- 清理旧UI
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "SnowGui" then
            v:Destroy()
        end
    end

    -- 应用主题
    if theme then
        for k, v in pairs(theme) do
            if libSnowGui.config[k] ~= nil then
                libSnowGui.config[k] = v
            end
        end
    end

    -- 创建主GUI
    local SnowGui = Instance.new("ScreenGui")
    SnowGui.Name = "SnowGui"
    SnowGui.ResetOnSpawn = false
    SnowGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
    
    if syn and syn.protect_gui then
        syn.protect_gui(SnowGui)
    end
    SnowGui.Parent = services.CoreGui

    -- 主窗口
    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = SnowGui
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = libSnowGui.config.backgroundColor
    Main.BackgroundTransparency = libSnowGui.config.transparency
    Main.BorderSizePixel = 0
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 600, 0, 400)
    Main.ZIndex = 2
    Main.Active = true

    -- 圆角
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = libSnowGui.config.cornerRadius
    MainCorner.Parent = Main

    -- 动态渐变背景
    local MainGradient = Instance.new("UIGradient")
    MainGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, libSnowGui.config.backgroundColor),
        ColorSequenceKeypoint.new(0.50, libSnowGui.config.secondaryColor),
        ColorSequenceKeypoint.new(1.00, libSnowGui.config.backgroundColor)
    }
    MainGradient.Rotation = 0
    MainGradient.Parent = Main

    -- 背景动画
    local bgTween = services.TweenService:Create(
        MainGradient,
        TweenInfo.new(10, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 360}
    )
    bgTween:Play()

    -- 霓虹边框
    local Border = Instance.new("Frame")
    Border.Name = "Border"
    Border.Parent = Main
    Border.BackgroundColor3 = Color3.new(1, 1, 1)
    Border.BorderSizePixel = 0
    Border.Size = UDim2.new(1, 0, 1, 0)
    Border.ZIndex = 1
    
    local BorderGradient = Instance.new("UIGradient")
    BorderGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 100, 100)),
        ColorSequenceKeypoint.new(0.25, Color3.fromRGB(100, 255, 100)),
        ColorSequenceKeypoint.new(0.50, Color3.fromRGB(100, 100, 255)),
        ColorSequenceKeypoint.new(0.75, Color3.fromRGB(255, 255, 100)),
        ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 100, 255))
    }
    BorderGradient.Rotation = 90
    BorderGradient.Parent = Border
    
    local BorderCorner = Instance.new("UICorner", Border)
    BorderCorner.CornerRadius = libSnowGui.config.cornerRadius
    
    -- 边框动画
    local borderTween = services.TweenService:Create(
        BorderGradient,
        TweenInfo.new(5, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 360}
    )
    borderTween:Play()

    -- 高级阴影效果
    local DropShadowHolder = Instance.new("Frame")
    DropShadowHolder.Name = "DropShadowHolder"
    DropShadowHolder.Parent = Main
    DropShadowHolder.BackgroundTransparency = 1
    DropShadowHolder.BorderSizePixel = 0
    DropShadowHolder.Size = UDim2.new(1, 0, 1, 0)
    DropShadowHolder.ZIndex = 0

    local DropShadow = Instance.new("ImageLabel")
    DropShadow.Name = "DropShadow"
    DropShadow.Parent = DropShadowHolder
    DropShadow.AnchorPoint = Vector2.new(0.5, 0.5)
    DropShadow.BackgroundTransparency = 1
    DropShadow.BorderSizePixel = 0
    DropShadow.Position = UDim2.new(0.5, 0, 0.5, 0)
    DropShadow.Size = UDim2.new(1, 50, 1, 50)
    DropShadow.ZIndex = 0
    DropShadow.Image = "rbxassetid://6015897843"
    DropShadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    DropShadow.ImageTransparency = libSnowGui.config.shadowIntensity
    DropShadow.ScaleType = Enum.ScaleType.Slice
    DropShadow.SliceCenter = Rect.new(49, 49, 450, 450)

    -- 侧边栏
    local SideBar = Instance.new("Frame")
    SideBar.Name = "SideBar"
    SideBar.Parent = Main
    SideBar.BackgroundColor3 = libSnowGui.config.secondaryColor
    SideBar.BackgroundTransparency = libSnowGui.config.transparency
    SideBar.BorderSizePixel = 0
    SideBar.Position = UDim2.new(0, 0, 0, 0)
    SideBar.Size = UDim2.new(0, 120, 1, 0)
    SideBar.ZIndex = 3

    local SideBarCorner = Instance.new("UICorner")
    SideBarCorner.CornerRadius = UDim.new(0, libSnowGui.config.cornerRadius.Offset)
    SideBarCorner.Parent = SideBar

    -- 侧边栏渐变
    local SideBarGradient = Instance.new("UIGradient")
    SideBarGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, libSnowGui.config.secondaryColor),
        ColorSequenceKeypoint.new(1.00, libSnowGui.config.backgroundColor)
    }
    SideBarGradient.Rotation = 90
    SideBarGradient.Parent = SideBar

    -- 标题
    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = SideBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 10)
    Title.Size = UDim2.new(1, -20, 0, 30)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = name
    Title.TextColor3 = libSnowGui.config.accentColor
    Title.TextSize = 18
    Title.TextXAlignment = Enum.TextXAlignment.Left

    -- 标题渐变
    local TitleGradient = Instance.new("UIGradient")
    TitleGradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0.00, libSnowGui.config.accentColor),
        ColorSequenceKeypoint.new(0.50, libSnowGui.config.textColor),
        ColorSequenceKeypoint.new(1.00, libSnowGui.config.accentColor)
    }
    TitleGradient.Parent = Title

    -- 标题动画
    local titleTween = services.TweenService:Create(
        TitleGradient,
        TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Offset = Vector2.new(1, 0)}
    )
    titleTween:Play()

    -- 标签按钮容器
    local TabButtons = Instance.new("ScrollingFrame")
    TabButtons.Name = "TabButtons"
    TabButtons.Parent = SideBar
    TabButtons.Active = true
    TabButtons.BackgroundTransparency = 1
    TabButtons.BorderSizePixel = 0
    TabButtons.Position = UDim2.new(0, 10, 0, 50)
    TabButtons.Size = UDim2.new(1, -20, 1, -60)
    TabButtons.CanvasSize = UDim2.new(0, 0, 0, 0)
    TabButtons.ScrollBarThickness = 3
    TabButtons.ScrollBarImageColor3 = libSnowGui.config.accentColor

    local TabButtonsLayout = Instance.new("UIListLayout")
    TabButtonsLayout.Name = "TabButtonsLayout"
    TabButtonsLayout.Parent = TabButtons
    TabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    TabButtonsLayout.Padding = UDim.new(0, 10)

    TabButtonsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        TabButtons.CanvasSize = UDim2.new(0, 0, 0, TabButtonsLayout.AbsoluteContentSize.Y)
    end)

    -- 内容区域
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Parent = Main
    Content.BackgroundTransparency = 1
    Content.BorderSizePixel = 0
    Content.Position = UDim2.new(0, 130, 0, 10)
    Content.Size = UDim2.new(1, -140, 1, -20)
    Content.ZIndex = 2

    -- 切换UI按钮
    local ToggleButton = Instance.new("TextButton")
    ToggleButton.Name = "ToggleButton"
    ToggleButton.Parent = SnowGui
    ToggleButton.BackgroundColor3 = libSnowGui.config.backgroundColor
    ToggleButton.BackgroundTransparency = libSnowGui.config.transparency
    ToggleButton.Position = UDim2.new(0, 10, 0.5, -25)
    ToggleButton.Size = UDim2.new(0, 50, 0, 50)
    ToggleButton.Font = Enum.Font.GothamBold
    ToggleButton.Text = "☰"
    ToggleButton.TextColor3 = libSnowGui.config.textColor
    ToggleButton.TextSize = 20
    ToggleButton.ZIndex = 10

    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = libSnowGui.config.cornerRadius
    ToggleCorner.Parent = ToggleButton

    -- 按钮悬停效果
    ToggleButton.MouseEnter:Connect(function()
        libSnowGui.Tween(ToggleButton, {0.2, "Quad", "Out"}, {
            BackgroundTransparency = libSnowGui.config.hoverTransparency,
            TextColor3 = libSnowGui.config.accentColor
        })
    end)

    ToggleButton.MouseLeave:Connect(function()
        libSnowGui.Tween(ToggleButton, {0.2, "Quad", "Out"}, {
            BackgroundTransparency = libSnowGui.config.transparency,
            TextColor3 = libSnowGui.config.textColor
        })
    end)

    -- 切换UI可见性
    local isVisible = true
    ToggleButton.MouseButton1Click:Connect(function()
        isVisible = not isVisible
        if isVisible then
            libSnowGui.Tween(Main, {0.3, "Quad", "Out"}, {
                Size = UDim2.new(0, 600, 0, 400)
            })
        else
            libSnowGui.Tween(Main, {0.3, "Quad", "Out"}, {
                Size = UDim2.new(0, 600, 0, 0)
            })
        end
    end)

    -- 拖拽功能
    libSnowGui.drag(Main, Title)

    -- 快捷键控制
    services.UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.RightControl then
            isVisible = not isVisible
            Main.Visible = isVisible
        end
    end)

    -- 窗口对象
    local window = {}
    
    -- 创建标签页
    function window:Tab(name, icon)
        local Tab = Instance.new("ScrollingFrame")
        Tab.Name = "Tab"
        Tab.Parent = Content
        Tab.Active = true
        Tab.BackgroundTransparency = 1
        Tab.BorderSizePixel = 0
        Tab.Size = UDim2.new(1, 0, 1, 0)
        Tab.ScrollBarThickness = 3
        Tab.ScrollBarImageColor3 = libSnowGui.config.accentColor
        Tab.Visible = false

        local TabLayout = Instance.new("UIListLayout")
        TabLayout.Name = "TabLayout"
        TabLayout.Parent = Tab
        TabLayout.SortOrder = Enum.SortOrder.LayoutOrder
        TabLayout.Padding = UDim.new(0, 10)

        TabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            Tab.CanvasSize = UDim2.new(0, 0, 0, TabLayout.AbsoluteContentSize.Y + 10)
        end)

        -- 标签按钮
        local TabButton = Instance.new("TextButton")
        TabButton.Name = "TabButton"
        TabButton.Parent = TabButtons
        TabButton.BackgroundColor3 = libSnowGui.config.secondaryColor
        TabButton.BackgroundTransparency = libSnowGui.config.transparency
        TabButton.BorderSizePixel = 0
        TabButton.Size = UDim2.new(1, 0, 0, 40)
        TabButton.AutoButtonColor = false
        TabButton.Font = Enum.Font.GothamSemibold
        TabButton.Text = "  " .. name
        TabButton.TextColor3 = libSnowGui.config.textColor
        TabButton.TextSize = 14
        TabButton.TextXAlignment = Enum.TextXAlignment.Left

        local TabButtonCorner = Instance.new("UICorner")
        TabButtonCorner.CornerRadius = libSnowGui.config.cornerRadius
        TabButtonCorner.Parent = TabButton

        -- 图标
        if icon then
            local TabIcon = Instance.new("ImageLabel")
            TabIcon.Name = "TabIcon"
            TabIcon.Parent = TabButton
            TabIcon.BackgroundTransparency = 1
            TabIcon.Position = UDim2.new(0, 10, 0.5, -12)
            TabIcon.Size = UDim2.new(0, 24, 0, 24)
            TabIcon.Image = "rbxassetid://" .. icon
            TabIcon.ImageColor3 = libSnowGui.config.textColor
        end

        -- 按钮悬停效果
        TabButton.MouseEnter:Connect(function()
            libSnowGui.Tween(TabButton, {0.2, "Quad", "Out"}, {
                BackgroundTransparency = libSnowGui.config.hoverTransparency,
                TextColor3 = libSnowGui.config.accentColor
            })
        end)

        TabButton.MouseLeave:Connect(function()
            if libSnowGui.currentTab and libSnowGui.currentTab[1] ~= TabButton then
                libSnowGui.Tween(TabButton, {0.2, "Quad", "Out"}, {
                    BackgroundTransparency = libSnowGui.config.transparency,
                    TextColor3 = libSnowGui.config.textColor
                })
            end
        end)

        -- 点击切换标签
        TabButton.MouseButton1Click:Connect(function()
            libSnowGui.Ripple(TabButton)
            libSnowGui.switchTab({TabButton, Tab})
        end)

        -- 如果是第一个标签，设为当前标签
        if libSnowGui.currentTab == nil then
            libSnowGui.switchTab({TabButton, Tab})
        end

        -- 标签页对象
        local tab = {}
        
        -- 创建分区
        function tab:Section(name, isOpen)
            local Section = Instance.new("Frame")
            Section.Name = "Section"
            Section.Parent = Tab
            Section.BackgroundColor3 = libSnowGui.config.secondaryColor
            Section.BackgroundTransparency = libSnowGui.config.transparency
            Section.BorderSizePixel = 0
            Section.ClipsDescendants = true
            Section.Size = UDim2.new(1, 0, 0, 40)

            local SectionCorner = Instance.new("UICorner")
            SectionCorner.CornerRadius = libSnowGui.config.cornerRadius
            SectionCorner.Parent = Section

            -- 标题
            local SectionTitle = Instance.new("TextButton")
            SectionTitle.Name = "SectionTitle"
            SectionTitle.Parent = Section
            SectionTitle.BackgroundTransparency = 1
            SectionTitle.Size = UDim2.new(1, 0, 0, 40)
            SectionTitle.Font = Enum.Font.GothamSemibold
            SectionTitle.Text = "  " .. name
            SectionTitle.TextColor3 = libSnowGui.config.textColor
            SectionTitle.TextSize = 16
            SectionTitle.TextXAlignment = Enum.TextXAlignment.Left
            SectionTitle.AutoButtonColor = false

            -- 展开/折叠图标
            local SectionToggle = Instance.new("ImageButton")
            SectionToggle.Name = "SectionToggle"
            SectionToggle.Parent = SectionTitle
            SectionToggle.BackgroundTransparency = 1
            SectionToggle.AnchorPoint = Vector2.new(1, 0.5)
            SectionToggle.Position = UDim2.new(1, -10, 0.5, 0)
            SectionToggle.Size = UDim2.new(0, 20, 0, 20)
            SectionToggle.Image = isOpen and "rbxassetid://6031302932" or "rbxassetid://6031302934"
            SectionToggle.ImageColor3 = libSnowGui.config.accentColor

            -- 内容容器
            local SectionContent = Instance.new("Frame")
            SectionContent.Name = "SectionContent"
            SectionContent.Parent = Section
            SectionContent.BackgroundTransparency = 1
            SectionContent.BorderSizePixel = 0
            SectionContent.Position = UDim2.new(0, 10, 0, 45)
            SectionContent.Size = UDim2.new(1, -20, 0, 0)

            local SectionContentLayout = Instance.new("UIListLayout")
            SectionContentLayout.Name = "SectionContentLayout"
            SectionContentLayout.Parent = SectionContent
            SectionContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            SectionContentLayout.Padding = UDim.new(0, 5)

            SectionContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if open then
                    Section.Size = UDim2.new(1, 0, 0, 45 + SectionContentLayout.AbsoluteContentSize.Y + 5)
                end
            end)

            local open = isOpen == true
            if open then
                Section.Size = UDim2.new(1, 0, 0, 45 + SectionContentLayout.AbsoluteContentSize.Y + 5)
            end

            -- 切换展开状态
            local function toggleSection()
                open = not open
                if open then
                    SectionToggle.Image = "rbxassetid://6031302932"
                    Section.Size = UDim2.new(1, 0, 0, 45 + SectionContentLayout.AbsoluteContentSize.Y + 5)
                else
                    SectionToggle.Image = "rbxassetid://6031302934"
                    Section.Size = UDim2.new(1, 0, 0, 40)
                end
            end

            SectionToggle.MouseButton1Click:Connect(toggleSection)
            SectionTitle.MouseButton1Click:Connect(toggleSection)

            -- 分区对象
            local section = {}
            
            -- 创建按钮
            function section:Button(text, callback)
                local Button = Instance.new("TextButton")
                Button.Name = "Button"
                Button.Parent = SectionContent
                Button.BackgroundColor3 = libSnowGui.config.secondaryColor
                Button.BackgroundTransparency = libSnowGui.config.transparency
                Button.BorderSizePixel = 0
                Button.Size = UDim2.new(1, 0, 0, 35)
                Button.Font = Enum.Font.GothamSemibold
                Button.Text = "  " .. text
                Button.TextColor3 = libSnowGui.config.textColor
                Button.TextSize = 14
                Button.TextXAlignment = Enum.TextXAlignment.Left
                Button.AutoButtonColor = false

                local ButtonCorner = Instance.new("UICorner")
                ButtonCorner.CornerRadius = libSnowGui.config.cornerRadius
                ButtonCorner.Parent = Button

                -- 按钮悬停效果
                Button.MouseEnter:Connect(function()
                    libSnowGui.Tween(Button, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency,
                        TextColor3 = libSnowGui.config.accentColor
                    })
                end)

                Button.MouseLeave:Connect(function()
                    libSnowGui.Tween(Button, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency,
                        TextColor3 = libSnowGui.config.textColor
                    })
                end)

                -- 点击事件
                Button.MouseButton1Click:Connect(function()
                    libSnowGui.Ripple(Button)
                    if callback then callback() end
                end)

                return Button
            end

            -- 创建标签
            function section:Label(text)
                local Label = Instance.new("TextLabel")
                Label.Name = "Label"
                Label.Parent = SectionContent
                Label.BackgroundTransparency = 1
                Label.Size = UDim2.new(1, 0, 0, 20)
                Label.Font = Enum.Font.Gotham
                Label.Text = text
                Label.TextColor3 = libSnowGui.config.textColor
                Label.TextSize = 14
                Label.TextXAlignment = Enum.TextXAlignment.Left

                return Label
            end

            -- 创建开关
            function section:Toggle(text, flag, default, callback)
                local default = default or false
                local callback = callback or function() end
                
                libSnowGui.flags[flag] = default

                local Toggle = Instance.new("TextButton")
                Toggle.Name = "Toggle"
                Toggle.Parent = SectionContent
                Toggle.BackgroundColor3 = libSnowGui.config.secondaryColor
                Toggle.BackgroundTransparency = libSnowGui.config.transparency
                Toggle.BorderSizePixel = 0
                Toggle.Size = UDim2.new(1, 0, 0, 35)
                Toggle.Font = Enum.Font.GothamSemibold
                Toggle.Text = "  " .. text
                Toggle.TextColor3 = libSnowGui.config.textColor
                Toggle.TextSize = 14
                Toggle.TextXAlignment = Enum.TextXAlignment.Left
                Toggle.AutoButtonColor = false

                local ToggleCorner = Instance.new("UICorner")
                ToggleCorner.CornerRadius = libSnowGui.config.cornerRadius
                ToggleCorner.Parent = Toggle

                -- 开关状态指示器
                local ToggleIndicator = Instance.new("Frame")
                ToggleIndicator.Name = "ToggleIndicator"
                ToggleIndicator.Parent = Toggle
                ToggleIndicator.AnchorPoint = Vector2.new(1, 0.5)
                ToggleIndicator.BackgroundColor3 = libSnowGui.config.backgroundColor
                ToggleIndicator.BackgroundTransparency = libSnowGui.config.transparency
                ToggleIndicator.BorderSizePixel = 0
                ToggleIndicator.Position = UDim2.new(1, -10, 0.5, 0)
                ToggleIndicator.Size = UDim2.new(0, 40, 0, 20)

                local ToggleIndicatorCorner = Instance.new("UICorner")
                ToggleIndicatorCorner.CornerRadius = UDim.new(1, 0)
                ToggleIndicatorCorner.Parent = ToggleIndicator

                local ToggleSwitch = Instance.new("Frame")
                ToggleSwitch.Name = "ToggleSwitch"
                ToggleSwitch.Parent = ToggleIndicator
                ToggleSwitch.AnchorPoint = Vector2.new(0, 0.5)
                ToggleSwitch.BackgroundColor3 = default and libSnowGui.config.accentColor or libSnowGui.config.textColor
                ToggleSwitch.BorderSizePixel = 0
                ToggleSwitch.Position = UDim2.new(0, default and 20 or 0, 0.5, 0)
                ToggleSwitch.Size = UDim2.new(0, 20, 0, 20)

                local ToggleSwitchCorner = Instance.new("UICorner")
                ToggleSwitchCorner.CornerRadius = UDim.new(1, 0)
                ToggleSwitchCorner.Parent = ToggleSwitch

                -- 按钮悬停效果
                Toggle.MouseEnter:Connect(function()
                    libSnowGui.Tween(Toggle, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency,
                        TextColor3 = libSnowGui.config.accentColor
                    })
                end)

                Toggle.MouseLeave:Connect(function()
                    libSnowGui.Tween(Toggle, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency,
                        TextColor3 = libSnowGui.config.textColor
                    })
                end)

                -- 切换状态函数
                local function setState(state)
                    if state == nil then state = not libSnowGui.flags[flag] end
                    if libSnowGui.flags[flag] == state then return end
                    
                    libSnowGui.flags[flag] = state
                    libSnowGui.Tween(ToggleSwitch, {0.2, "Quad", "Out"}, {
                        Position = UDim2.new(0, state and 20 or 0, 0.5, 0),
                        BackgroundColor3 = state and libSnowGui.config.accentColor or libSnowGui.config.textColor
                    })
                    callback(state)
                end

                -- 点击切换
                Toggle.MouseButton1Click:Connect(function()
                    libSnowGui.Ripple(Toggle)
                    setState()
                end)

                -- 返回控制函数
                return {
                    SetState = setState
                }
            end

            -- 创建滑块
            function section:Slider(text, flag, min, max, default, callback)
                local min = min or 0
                local max = max or 100
                local default = default or min
                local callback = callback or function() end
                
                libSnowGui.flags[flag] = default

                local Slider = Instance.new("TextButton")
                Slider.Name = "Slider"
                Slider.Parent = SectionContent
                Slider.BackgroundColor3 = libSnowGui.config.secondaryColor
                Slider.BackgroundTransparency = libSnowGui.config.transparency
                Slider.BorderSizePixel = 0
                Slider.Size = UDim2.new(1, 0, 0, 50)
                Slider.Font = Enum.Font.GothamSemibold
                Slider.Text = "  " .. text
                Slider.TextColor3 = libSnowGui.config.textColor
                Slider.TextSize = 14
                Slider.TextXAlignment = Enum.TextXAlignment.Left
                Slider.AutoButtonColor = false

                local SliderCorner = Instance.new("UICorner")
                SliderCorner.CornerRadius = libSnowGui.config.cornerRadius
                SliderCorner.Parent = Slider

                -- 滑块条
                local SliderTrack = Instance.new("Frame")
                SliderTrack.Name = "SliderTrack"
                SliderTrack.Parent = Slider
                SliderTrack.BackgroundColor3 = libSnowGui.config.backgroundColor
                SliderTrack.BackgroundTransparency = libSnowGui.config.transparency
                SliderTrack.BorderSizePixel = 0
                SliderTrack.Position = UDim2.new(0.05, 0, 0.7, 0)
                SliderTrack.Size = UDim2.new(0.9, 0, 0, 5)

                local SliderTrackCorner = Instance.new("UICorner")
                SliderTrackCorner.CornerRadius = UDim.new(1, 0)
                SliderTrackCorner.Parent = SliderTrack

                -- 滑块填充
                local SliderFill = Instance.new("Frame")
                SliderFill.Name = "SliderFill"
                SliderFill.Parent = SliderTrack
                SliderFill.BackgroundColor3 = libSnowGui.config.accentColor
                SliderFill.BorderSizePixel = 0
                SliderFill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)

                local SliderFillCorner = Instance.new("UICorner")
                SliderFillCorner.CornerRadius = UDim.new(1, 0)
                SliderFillCorner.Parent = SliderFill

                -- 滑块手柄
                local SliderThumb = Instance.new("Frame")
                SliderThumb.Name = "SliderThumb"
                SliderThumb.Parent = SliderTrack
                SliderThumb.AnchorPoint = Vector2.new(0.5, 0.5)
                SliderThumb.BackgroundColor3 = libSnowGui.config.textColor
                SliderThumb.BorderSizePixel = 0
                SliderThumb.Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0)
                SliderThumb.Size = UDim2.new(0, 15, 0, 15)

                local SliderThumbCorner = Instance.new("UICorner")
                SliderThumbCorner.CornerRadius = UDim.new(1, 0)
                SliderThumbCorner.Parent = SliderThumb

                -- 值显示
                local SliderValue = Instance.new("TextBox")
                SliderValue.Name = "SliderValue"
                SliderValue.Parent = Slider
                SliderValue.BackgroundColor3 = libSnowGui.config.backgroundColor
                SliderValue.BackgroundTransparency = libSnowGui.config.transparency
                SliderValue.BorderSizePixel = 0
                SliderValue.AnchorPoint = Vector2.new(1, 0)
                SliderValue.Position = UDim2.new(1, -10, 0.1, 0)
                SliderValue.Size = UDim2.new(0, 50, 0, 20)
                SliderValue.Font = Enum.Font.Gotham
                SliderValue.Text = tostring(default)
                SliderValue.TextColor3 = libSnowGui.config.textColor
                SliderValue.TextSize = 14
                SliderValue.ClearTextOnFocus = false

                local SliderValueCorner = Instance.new("UICorner")
                SliderValueCorner.CornerRadius = libSnowGui.config.cornerRadius
                SliderValueCorner.Parent = SliderValue

                -- 按钮悬停效果
                Slider.MouseEnter:Connect(function()
                    libSnowGui.Tween(Slider, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency,
                        TextColor3 = libSnowGui.config.accentColor
                    })
                end)

                Slider.MouseLeave:Connect(function()
                    libSnowGui.Tween(Slider, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency,
                        TextColor3 = libSnowGui.config.textColor
                    })
                end)

                -- 设置值函数
                local function setValue(value)
                    value = math.clamp(value, min, max)
                    local percent = (value - min) / (max - min)
                    
                    libSnowGui.flags[flag] = value
                    SliderValue.Text = tostring(value)
                    
                    libSnowGui.Tween(SliderFill, {0.2, "Quad", "Out"}, {
                        Size = UDim2.new(percent, 0, 1, 0)
                    })
                    
                    libSnowGui.Tween(SliderThumb, {0.2, "Quad", "Out"}, {
                        Position = UDim2.new(percent, 0, 0.5, 0)
                    })
                    
                    callback(value)
                end

                -- 拖动滑块
                local dragging = false
                SliderTrack.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        local percent = (mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                        setValue(min + (max - min) * percent)
                    end
                end)

                services.UserInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)

                services.UserInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local percent = (mouse.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                        setValue(min + (max - min) * percent)
                    end
                end)

                -- 手动输入值
                SliderValue.FocusLost:Connect(function()
                    local value = tonumber(SliderValue.Text)
                    if value then
                        setValue(value)
                    else
                        SliderValue.Text = tostring(libSnowGui.flags[flag])
                    end
                end)

                -- 初始化
                setValue(default)

                -- 返回控制函数
                return {
                    SetValue = setValue
                }
            end

            -- 创建下拉框
            function section:Dropdown(text, flag, options, callback)
                local options = options or {}
                local callback = callback or function() end
                
                libSnowGui.flags[flag] = nil

                local Dropdown = Instance.new("TextButton")
                Dropdown.Name = "Dropdown"
                Dropdown.Parent = SectionContent
                Dropdown.BackgroundColor3 = libSnowGui.config.secondaryColor
                Dropdown.BackgroundTransparency = libSnowGui.config.transparency
                Dropdown.BorderSizePixel = 0
                Dropdown.Size = UDim2.new(1, 0, 0, 35)
                Dropdown.Font = Enum.Font.GothamSemibold
                Dropdown.Text = "  " .. text
                Dropdown.TextColor3 = libSnowGui.config.textColor
                Dropdown.TextSize = 14
                Dropdown.TextXAlignment = Enum.TextXAlignment.Left
                Dropdown.AutoButtonColor = false
                Dropdown.ClipsDescendants = true

                local DropdownCorner = Instance.new("UICorner")
                DropdownCorner.CornerRadius = libSnowGui.config.cornerRadius
                DropdownCorner.Parent = Dropdown

                -- 下拉箭头
                local DropdownArrow = Instance.new("ImageLabel")
                DropdownArrow.Name = "DropdownArrow"
                DropdownArrow.Parent = Dropdown
                DropdownArrow.AnchorPoint = Vector2.new(1, 0.5)
                DropdownArrow.BackgroundTransparency = 1
                DropdownArrow.Position = UDim2.new(1, -10, 0.5, 0)
                DropdownArrow.Size = UDim2.new(0, 20, 0, 20)
                DropdownArrow.Image = "rbxassetid://6031091004"
                DropdownArrow.ImageColor3 = libSnowGui.config.textColor

                -- 选项容器
                local DropdownOptions = Instance.new("Frame")
                DropdownOptions.Name = "DropdownOptions"
                DropdownOptions.Parent = Dropdown
                DropdownOptions.BackgroundColor3 = libSnowGui.config.secondaryColor
                DropdownOptions.BackgroundTransparency = libSnowGui.config.transparency
                DropdownOptions.BorderSizePixel = 0
                DropdownOptions.Position = UDim2.new(0, 10, 1, 5)
                DropdownOptions.Size = UDim2.new(1, -20, 0, 0)
                DropdownOptions.Visible = false

                local DropdownOptionsCorner = Instance.new("UICorner")
                DropdownOptionsCorner.CornerRadius = libSnowGui.config.cornerRadius
                DropdownOptionsCorner.Parent = DropdownOptions

                local DropdownOptionsLayout = Instance.new("UIListLayout")
                DropdownOptionsLayout.Name = "DropdownOptionsLayout"
                DropdownOptionsLayout.Parent = DropdownOptions
                DropdownOptionsLayout.SortOrder = Enum.SortOrder.LayoutOrder

                DropdownOptionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    DropdownOptions.Size = UDim2.new(1, -20, 0, DropdownOptionsLayout.AbsoluteContentSize.Y)
                end)

                -- 按钮悬停效果
                Dropdown.MouseEnter:Connect(function()
                    libSnowGui.Tween(Dropdown, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency,
                        TextColor3 = libSnowGui.config.accentColor
                    })
                    libSnowGui.Tween(DropdownArrow, {0.2, "Quad", "Out"}, {
                        ImageColor3 = libSnowGui.config.accentColor
                    })
                end)

                Dropdown.MouseLeave:Connect(function()
                    libSnowGui.Tween(Dropdown, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency,
                        TextColor3 = libSnowGui.config.textColor
                    })
                    libSnowGui.Tween(DropdownArrow, {0.2, "Quad", "Out"}, {
                        ImageColor3 = libSnowGui.config.textColor
                    })
                end)

                -- 切换下拉状态
                local function toggleDropdown()
                    local open = not DropdownOptions.Visible
                    DropdownOptions.Visible = open
                    
                    libSnowGui.Tween(DropdownArrow, {0.2, "Quad", "Out"}, {
                        Rotation = open and 180 or 0
                    })
                    
                    if open then
                        Dropdown.Size = UDim2.new(1, 0, 0, 35 + DropdownOptionsLayout.AbsoluteContentSize.Y + 10)
                    else
                        Dropdown.Size = UDim2.new(1, 0, 0, 35)
                    end
                end

                Dropdown.MouseButton1Click:Connect(toggleDropdown)

                -- 添加选项
                local function addOption(option)
                    local Option = Instance.new("TextButton")
                    Option.Name = "Option_" .. option
                    Option.Parent = DropdownOptions
                    Option.BackgroundColor3 = libSnowGui.config.backgroundColor
                    Option.BackgroundTransparency = libSnowGui.config.transparency
                    Option.BorderSizePixel = 0
                    Option.Size = UDim2.new(1, 0, 0, 30)
                    Option.Font = Enum.Font.Gotham
                    Option.Text = "  " .. option
                    Option.TextColor3 = libSnowGui.config.textColor
                    Option.TextSize = 14
                    Option.TextXAlignment = Enum.TextXAlignment.Left
                    Option.AutoButtonColor = false

                    local OptionCorner = Instance.new("UICorner")
                    OptionCorner.CornerRadius = libSnowGui.config.cornerRadius
                    OptionCorner.Parent = Option

                    -- 选项悬停效果
                    Option.MouseEnter:Connect(function()
                        libSnowGui.Tween(Option, {0.2, "Quad", "Out"}, {
                            BackgroundTransparency = libSnowGui.config.hoverTransparency,
                            TextColor3 = libSnowGui.config.accentColor
                        })
                    end)

                    Option.MouseLeave:Connect(function()
                        libSnowGui.Tween(Option, {0.2, "Quad", "Out"}, {
                            BackgroundTransparency = libSnowGui.config.transparency,
                            TextColor3 = libSnowGui.config.textColor
                        })
                    end)

                    -- 选择选项
                    Option.MouseButton1Click:Connect(function()
                        libSnowGui.Ripple(Option)
                        libSnowGui.flags[flag] = option
                        Dropdown.Text = "  " .. text .. ": " .. option
                        callback(option)
                        toggleDropdown()
                    end)
                end

                -- 添加所有选项
                for _, option in ipairs(options) do
                    addOption(option)
                end

                -- 控制函数
                local dropdownFuncs = {}
                
                function dropdownFuncs:AddOption(option)
                    addOption(option)
                end
                
                function dropdownFuncs:RemoveOption(option)
                    local opt = DropdownOptions:FindFirstChild("Option_" .. option)
                    if opt then opt:Destroy() end
                end
                
                function dropdownFuncs:SetOptions(newOptions)
                    for _, child in ipairs(DropdownOptions:GetChildren()) do
                        if child:IsA("TextButton") then
                            child:Destroy()
                        end
                    end
                    
                    for _, option in ipairs(newOptions) do
                        addOption(option)
                    end
                end
                
                function dropdownFuncs:SetSelected(option)
                    if table.find(options, option) then
                        libSnowGui.flags[flag] = option
                        Dropdown.Text = "  " .. text .. ": " .. option
                        callback(option)
                    end
                end

                return dropdownFuncs
            end

            -- 创建文本框
            function section:Textbox(text, flag, placeholder, callback)
                local callback = callback or function() end
                local placeholder = placeholder or "输入文本..."
                
                libSnowGui.flags[flag] = ""

                local Textbox = Instance.new("TextButton")
                Textbox.Name = "Textbox"
                Textbox.Parent = SectionContent
                Textbox.BackgroundColor3 = libSnowGui.config.secondaryColor
                Textbox.BackgroundTransparency = libSnowGui.config.transparency
                Textbox.BorderSizePixel = 0
                Textbox.Size = UDim2.new(1, 0, 0, 35)
                Textbox.Font = Enum.Font.GothamSemibold
                Textbox.Text = "  " .. text
                Textbox.TextColor3 = libSnowGui.config.textColor
                Textbox.TextSize = 14
                Textbox.TextXAlignment = Enum.TextXAlignment.Left
                Textbox.AutoButtonColor = false

                local TextboxCorner = Instance.new("UICorner")
                TextboxCorner.CornerRadius = libSnowGui.config.cornerRadius
                TextboxCorner.Parent = Textbox

                -- 输入框
                local InputBox = Instance.new("TextBox")
                InputBox.Name = "InputBox"
                InputBox.Parent = Textbox
                InputBox.AnchorPoint = Vector2.new(1, 0.5)
                InputBox.BackgroundColor3 = libSnowGui.config.backgroundColor
                InputBox.BackgroundTransparency = libSnowGui.config.transparency
                InputBox.BorderSizePixel = 0
                InputBox.Position = UDim2.new(1, -10, 0.5, 0)
                InputBox.Size = UDim2.new(0, 150, 0, 25)
                InputBox.Font = Enum.Font.Gotham
                InputBox.PlaceholderText = placeholder
                InputBox.PlaceholderColor3 = Color3.fromRGB(200, 200, 200)
                InputBox.Text = ""
                InputBox.TextColor3 = libSnowGui.config.textColor
                InputBox.TextSize = 14
                InputBox.ClearTextOnFocus = false

                local InputBoxCorner = Instance.new("UICorner")
                InputBoxCorner.CornerRadius = libSnowGui.config.cornerRadius
                InputBoxCorner.Parent = InputBox

                -- 按钮悬停效果
                Textbox.MouseEnter:Connect(function()
                    libSnowGui.Tween(Textbox, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency,
                        TextColor3 = libSnowGui.config.accentColor
                    })
                end)

                Textbox.MouseLeave:Connect(function()
                    libSnowGui.Tween(Textbox, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency,
                        TextColor3 = libSnowGui.config.textColor
                    })
                end)

                -- 输入框悬停效果
                InputBox.MouseEnter:Connect(function()
                    libSnowGui.Tween(InputBox, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.hoverTransparency
                    })
                end)

                InputBox.MouseLeave:Connect(function()
                    libSnowGui.Tween(InputBox, {0.2, "Quad", "Out"}, {
                        BackgroundTransparency = libSnowGui.config.transparency
                    })
                end)

                -- 文本变化事件
                InputBox.FocusLost:Connect(function()
                    libSnowGui.flags[flag] = InputBox.Text
                    callback(InputBox.Text)
                end)

                -- 返回控制函数
                return {
                    SetText = function(text)
                        InputBox.Text = text
                        libSnowGui.flags[flag] = text
                        callback(text)
                    end
                }
            end

            return section
        end

        return tab
    end

    return window
end

return libSnowGui
