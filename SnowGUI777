-- 黑暗风格UI库增强版
repeat
    task.wait()
until game:IsLoaded()
local library = {}
local ToggleUI = false
library.currentTab = nil
library.flags = {}

-- 服务快捷访问
local services = setmetatable({}, {
    __index = function(t, k)
        return game:GetService(k)
    end
})

-- 动画效果增强
local tweenService = services.TweenService
local runService = services.RunService
local userInputService = services.UserInputService
local mouse = services.Players.LocalPlayer:GetMouse()

-- 高级动画函数
function Tween(obj, t, data, callback)
    local tweenInfo = TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]])
    local tween = tweenService:Create(obj, tweenInfo, data)
    tween:Play()
    if callback then
        tween.Completed:Connect(callback)
    end
    return tween
end

-- 高级波纹效果
function Ripple(obj, color)
    spawn(function()
        if obj.ClipsDescendants ~= true then
            obj.ClipsDescendants = true
        end
        
        local Ripple = Instance.new("Frame")
        Ripple.Name = "Ripple"
        Ripple.Parent = obj
        Ripple.BackgroundColor3 = color or Color3.fromRGB(100, 150, 255)
        Ripple.BackgroundTransparency = 0.8
        Ripple.ZIndex = 10
        Ripple.AnchorPoint = Vector2.new(0.5, 0.5)
        
        local mousePos = Vector2.new(mouse.X, mouse.Y)
        local objPos = Vector2.new(obj.AbsolutePosition.X, obj.AbsolutePosition.Y)
        local objSize = Vector2.new(obj.AbsoluteSize.X, obj.AbsoluteSize.Y)
        
        local pos = (mousePos - objPos) / objSize
        Ripple.Position = UDim2.new(pos.X, 0, pos.Y, 0)
        Ripple.Size = UDim2.new(0, 0, 0, 0)
        
        local UICorner = Instance.new("UICorner", Ripple)
        UICorner.CornerRadius = UDim.new(1, 0)
        
        -- 波纹扩散动画
        Tween(Ripple, {0.5, "Quad", "Out"}, {
            Size = UDim2.new(2, 0, 2, 0),
            Position = UDim2.new(pos.X, -objSize.X/2, pos.Y, -objSize.Y/2),
            BackgroundTransparency = 1
        }, function()
            Ripple:Destroy()
        end)
    end)
end

-- 标签切换动画增强
local switchingTabs = false
function switchTab(new)
    if switchingTabs then return end
    local old = library.currentTab
    
    if old == nil then
        new[2].Visible = true
        library.currentTab = new
        Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
        Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})
        return
    end

    if old[1] == new[1] then return end
    
    switchingTabs = true
    library.currentTab = new

    -- 旧标签淡出
    Tween(old[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0.5})
    Tween(old[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0.5})
    
    -- 新标签淡入
    Tween(new[1], {0.15, "Quint", "Out"}, {ImageTransparency = 0})
    Tween(new[1].TabText, {0.15, "Quint", "Out"}, {TextTransparency = 0})
    
    -- 内容切换动画
    old[2].Visible = false
    new[2].Visible = true
    
    task.delay(0.15, function()
        switchingTabs = false
    end)
end

-- 拖拽功能增强
function drag(frame, hold)
    if not hold then hold = frame end
    
    local dragging
    local dragInput
    local dragStart
    local startPos
    local dragSpeed = 0.1 -- 拖拽平滑度

    local function update(input)
        local delta = input.Position - dragStart
        local newPos = UDim2.new(
            startPos.X.Scale, 
            startPos.X.Offset + delta.X, 
            startPos.Y.Scale, 
            startPos.Y.Offset + delta.Y
        )
        
        -- 平滑移动
        Tween(frame, {dragSpeed, "Quad", "Out"}, {Position = newPos})
    end

    hold.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    userInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end

-- 主UI创建函数
function library.new(library, name, theme)
    -- 清理旧UI
    for _, v in next, services.CoreGui:GetChildren() do
        if v.Name == "DarkUI_Library" then
            v:Destroy()
        end
    end

    -- 高级配色方案
    local colorScheme = {
        main = Color3.fromRGB(20, 20, 25),
        secondary = Color3.fromRGB(30, 30, 40),
        accent = Color3.fromRGB(100, 150, 255),
        text = Color3.fromRGB(220, 220, 220),
        darkText = Color3.fromRGB(50, 50, 50),
        highlight = Color3.fromRGB(120, 170, 255),
        shadow = Color3.fromRGB(0, 0, 0, 0.6)
    }

    -- 透明度设置
    local transparency = {
        main = 0.2,
        hover = 0.1,
        element = 0.3,
        disabled = 0.7
    }

    -- 创建主UI容器
    local uiContainer = Instance.new("ScreenGui")
    uiContainer.Name = "DarkUI_Library"
    uiContainer.ResetOnSpawn = false
    uiContainer.ZIndexBehavior = Enum.ZIndexBehavior.Global
    
    -- 保护UI
    if syn and syn.protect_gui then
        syn.protect_gui(uiContainer)
    end
    uiContainer.Parent = services.CoreGui

    -- UI销毁函数
    function library.Destroy()
        uiContainer:Destroy()
    end

    -- UI切换函数
    function library.Toggle()
        ToggleUI = not ToggleUI
        uiContainer.Enabled = ToggleUI
    end

    -- 主窗口
    local mainWindow = Instance.new("Frame")
    mainWindow.Name = "MainWindow"
    mainWindow.Parent = uiContainer
    mainWindow.AnchorPoint = Vector2.new(0.5, 0.5)
    mainWindow.BackgroundColor3 = colorScheme.main
    mainWindow.BackgroundTransparency = transparency.main
    mainWindow.BorderSizePixel = 0
    mainWindow.Position = UDim2.new(0.5, 0, 0.5, 0)
    mainWindow.Size = UDim2.new(0, 600, 0, 400)
    mainWindow.ZIndex = 2
    mainWindow.Active = true

    -- 主窗口圆角
    local mainCorner = Instance.new("UICorner", mainWindow)
    mainCorner.CornerRadius = UDim.new(0, 12)

    -- 高级阴影效果
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Parent = mainWindow
    shadow.BackgroundTransparency = 1
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.Image = "rbxassetid://1316045217"
    shadow.ImageColor3 = colorScheme.shadow
    shadow.ImageTransparency = 0.5
    shadow.ScaleType = Enum.ScaleType.Slice
    shadow.SliceCenter = Rect.new(50, 50, 450, 450)
    shadow.ZIndex = 1

    -- 动态渐变背景
    local gradient = Instance.new("UIGradient")
    gradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colorScheme.main),
        ColorSequenceKeypoint.new(1, colorScheme.secondary)
    })
    gradient.Rotation = 45
    gradient.Parent = mainWindow

    -- 动态渐变动画
    local gradientTween = tweenService:Create(
        gradient,
        TweenInfo.new(15, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 360}
    )
    gradientTween:Play()

    -- 彩色边框效果
    local border = Instance.new("Frame")
    border.Name = "Border"
    border.Parent = mainWindow
    border.BackgroundColor3 = Color3.new(1, 1, 1)
    border.BorderSizePixel = 0
    border.Size = UDim2.new(1, 4, 1, 4)
    border.Position = UDim2.new(0, -2, 0, -2)
    border.ZIndex = 0
    
    local borderGradient = Instance.new("UIGradient", border)
    borderGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 100, 100)),
        ColorSequenceKeypoint.new(0.25, Color3.fromRGB(100, 255, 100)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(100, 100, 255)),
        ColorSequenceKeypoint.new(0.75, Color3.fromRGB(255, 255, 100)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 100, 255))
    })
    borderGradient.Rotation = 90
    
    local borderCorner = Instance.new("UICorner", border)
    borderCorner.CornerRadius = UDim.new(0, 14)
    
    -- 边框动画
    local borderTween = tweenService:Create(
        borderGradient,
        TweenInfo.new(10, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Rotation = 360}
    )
    borderTween:Play()

    -- 标题栏
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Parent = mainWindow
    titleBar.BackgroundColor3 = colorScheme.secondary
    titleBar.BackgroundTransparency = transparency.element
    titleBar.BorderSizePixel = 0
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.ZIndex = 3
    
    local titleCorner = Instance.new("UICorner", titleBar)
    titleCorner.CornerRadius = UDim.new(0, 12, 0, 0)

    -- 标题文本
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Parent = titleBar
    titleText.BackgroundTransparency = 1
    titleText.Position = UDim2.new(0, 15, 0, 0)
    titleText.Size = UDim2.new(0, 200, 1, 0)
    titleText.Font = Enum.Font.GothamBold
    titleText.Text = name or "Dark UI Library"
    titleText.TextColor3 = colorScheme.text
    titleText.TextSize = 18
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.ZIndex = 4

    -- 标题渐变效果
    local titleGradient = Instance.new("UIGradient", titleText)
    titleGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, colorScheme.accent),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(1, colorScheme.accent)
    })
    titleGradient.Rotation = 0
    
    -- 标题动画
    local titleTween = tweenService:Create(
        titleGradient,
        TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
        {Offset = Vector2.new(1, 0)}
    )
    titleTween:Play()

    -- 关闭按钮
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Parent = titleBar
    closeButton.BackgroundColor3 = colorScheme.secondary
    closeButton.BackgroundTransparency = transparency.element
    closeButton.BorderSizePixel = 0
    closeButton.Position = UDim2.new(1, -40, 0.5, -15)
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Text = "X"
    closeButton.TextColor3 = colorScheme.text
    closeButton.TextSize = 16
    closeButton.ZIndex = 4
    
    local closeCorner = Instance.new("UICorner", closeButton)
    closeCorner.CornerRadius = UDim.new(1, 0)
    
    -- 关闭按钮动画
    closeButton.MouseEnter:Connect(function()
        Tween(closeButton, {0.2, "Quint", "Out"}, {
            BackgroundColor3 = Color3.fromRGB(255, 60, 60),
            TextColor3 = Color3.fromRGB(255, 255, 255)
        })
    end)
    
    closeButton.MouseLeave:Connect(function()
        Tween(closeButton, {0.2, "Quint", "Out"}, {
            BackgroundColor3 = colorScheme.secondary,
            TextColor3 = colorScheme.text
        })
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        library.Destroy()
    end)

    -- 侧边栏
    local sidebar = Instance.new("Frame")
    sidebar.Name = "Sidebar"
    sidebar.Parent = mainWindow
    sidebar.BackgroundColor3 = colorScheme.secondary
    sidebar.BackgroundTransparency = transparency.element
    sidebar.BorderSizePixel = 0
    sidebar.Position = UDim2.new(0, 0, 0, 40)
    sidebar.Size = UDim2.new(0, 120, 1, -40)
    sidebar.ZIndex = 3
    
    local sidebarCorner = Instance.new("UICorner", sidebar)
    sidebarCorner.CornerRadius = UDim.new(0, 0, 0, 12)

    -- 侧边栏渐变
    local sidebarGradient = Instance.new("UIGradient", sidebar)
    sidebarGradient.Color = ColorSequence.new({
        ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 25, 35)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(35, 35, 45))
    })
    sidebarGradient.Rotation = 90

    -- 标签按钮容器
    local tabButtons = Instance.new("ScrollingFrame")
    tabButtons.Name = "TabButtons"
    tabButtons.Parent = sidebar
    tabButtons.BackgroundTransparency = 1
    tabButtons.BorderSizePixel = 0
    tabButtons.Position = UDim2.new(0, 0, 0, 10)
    tabButtons.Size = UDim2.new(1, 0, 1, -10)
    tabButtons.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabButtons.ScrollBarThickness = 4
    tabButtons.ScrollBarImageColor3 = colorScheme.accent
    tabButtons.ZIndex = 4
    
    local tabButtonsLayout = Instance.new("UIListLayout", tabButtons)
    tabButtonsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    tabButtonsLayout.Padding = UDim.new(0, 10)
    
    tabButtonsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tabButtons.CanvasSize = UDim2.new(0, 0, 0, tabButtonsLayout.AbsoluteContentSize.Y + 20)
    end)

    -- 内容区域
    local contentArea = Instance.new("Frame")
    contentArea.Name = "ContentArea"
    contentArea.Parent = mainWindow
    contentArea.BackgroundTransparency = 1
    contentArea.BorderSizePixel = 0
    contentArea.Position = UDim2.new(0, 125, 0, 45)
    contentArea.Size = UDim2.new(1, -130, 1, -50)
    contentArea.ZIndex = 3

    -- 最小化/切换按钮
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Parent = uiContainer
    toggleButton.BackgroundColor3 = colorScheme.main
    toggleButton.BackgroundTransparency = transparency.main
    toggleButton.Position = UDim2.new(0, 10, 0.5, -25)
    toggleButton.Size = UDim2.new(0, 50, 0, 50)
    toggleButton.Font = Enum.Font.GothamBold
    toggleButton.Text = "☰"
    toggleButton.TextColor3 = colorScheme.text
    toggleButton.TextSize = 20
    toggleButton.ZIndex = 5
    
    local toggleCorner = Instance.new("UICorner", toggleButton)
    toggleCorner.CornerRadius = UDim.new(1, 0)
    
    -- 切换按钮动画
    toggleButton.MouseEnter:Connect(function()
        Tween(toggleButton, {0.2, "Quint", "Out"}, {
            BackgroundTransparency = transparency.hover,
            TextColor3 = colorScheme.accent
        })
    end)
    
    toggleButton.MouseLeave:Connect(function()
        Tween(toggleButton, {0.2, "Quint", "Out"}, {
            BackgroundTransparency = transparency.main,
            TextColor3 = colorScheme.text
        })
    end)
    
    local isVisible = true
    toggleButton.MouseButton1Click:Connect(function()
        isVisible = not isVisible
        if isVisible then
            Tween(mainWindow, {0.3, "Quint", "Out"}, {
                Size = UDim2.new(0, 600, 0, 400)
            })
        else
            Tween(mainWindow, {0.3, "Quint", "Out"}, {
                Size = UDim2.new(0, 600, 0, 0)
            })
        end
    end)

    -- 拖拽功能
    drag(mainWindow, titleBar)

    -- 快捷键控制
    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        
        if input.KeyCode == Enum.KeyCode.RightControl then
            library.Toggle()
        end
    end)

    -- 窗口模块
    local window = {}
    
    function window.Tab(window, name, icon)
        -- 创建标签内容
        local tabContent = Instance.new("ScrollingFrame")
        tabContent.Name = "TabContent"
        tabContent.Parent = contentArea
        tabContent.BackgroundTransparency = 1
        tabContent.BorderSizePixel = 0
        tabContent.Size = UDim2.new(1, 0, 1, 0)
        tabContent.ScrollBarThickness = 4
        tabContent.ScrollBarImageColor3 = colorScheme.accent
        tabContent.Visible = false
        tabContent.ZIndex = 4
        
        local tabContentLayout = Instance.new("UIListLayout", tabContent)
        tabContentLayout.SortOrder = Enum.SortOrder.LayoutOrder
        tabContentLayout.Padding = UDim.new(0, 10)
        
        tabContentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            tabContent.CanvasSize = UDim2.new(0, 0, 0, tabContentLayout.AbsoluteContentSize.Y + 20)
        end)

        -- 创建标签按钮
        local tabButton = Instance.new("TextButton")
        tabButton.Name = "TabButton_"..name
        tabButton.Parent = tabButtons
        tabButton.BackgroundColor3 = colorScheme.secondary
        tabButton.BackgroundTransparency = transparency.element
        tabButton.BorderSizePixel = 0
        tabButton.Size = UDim2.new(1, -20, 0, 40)
        tabButton.AutoButtonColor = false
        tabButton.Font = Enum.Font.GothamSemibold
        tabButton.Text = ""
        tabButton.TextColor3 = colorScheme.text
        tabButton.TextSize = 14
        tabButton.ZIndex = 5
        
        local tabButtonCorner = Instance.new("UICorner", tabButton)
        tabButtonCorner.CornerRadius = UDim.new(0, 8)
        
        -- 标签图标
        local tabIcon = Instance.new("ImageLabel")
        tabIcon.Name = "Icon"
        tabIcon.Parent = tabButton
        tabIcon.BackgroundTransparency = 1
        tabIcon.Position = UDim2.new(0, 10, 0.5, -12)
        tabIcon.Size = UDim2.new(0, 24, 0, 24)
        tabIcon.Image = icon or "rbxassetid://4370341699"
        tabIcon.ImageTransparency = 0.5
        tabIcon.ZIndex = 6
        
        -- 标签文本
        local tabText = Instance.new("TextLabel")
        tabText.Name = "Text"
        tabText.Parent = tabButton
        tabText.BackgroundTransparency = 1
        tabText.Position = UDim2.new(0, 40, 0, 0)
        tabText.Size = UDim2.new(1, -40, 1, 0)
        tabText.Font = Enum.Font.GothamSemibold
        tabText.Text = name
        tabText.TextColor3 = colorScheme.text
        tabText.TextTransparency = 0.5
        tabText.TextSize = 14
        tabText.TextXAlignment = Enum.TextXAlignment.Left
        tabText.ZIndex = 6
        
        -- 标签按钮动画
        tabButton.MouseEnter:Connect(function()
            Tween(tabIcon, {0.2, "Quint", "Out"}, {ImageTransparency = 0.2})
            Tween(tabText, {0.2, "Quint", "Out"}, {TextTransparency = 0.2})
            Tween(tabButton, {0.2, "Quint", "Out"}, {
                BackgroundTransparency = transparency.hover,
                BackgroundColor3 = colorScheme.highlight
            })
        end)
        
        tabButton.MouseLeave:Connect(function()
            if library.currentTab and library.currentTab[1] == tabButton then return end
            Tween(tabIcon, {0.2, "Quint", "Out"}, {ImageTransparency = 0.5})
            Tween(tabText, {0.2, "Quint", "Out"}, {TextTransparency = 0.5})
            Tween(tabButton, {0.2, "Quint", "Out"}, {
                BackgroundTransparency = transparency.element,
                BackgroundColor3 = colorScheme.secondary
            })
        end)
        
        tabButton.MouseButton1Click:Connect(function()
            Ripple(tabButton, colorScheme.accent)
            switchTab({tabButton, tabContent})
        end)

        -- 如果是第一个标签，自动选中
        if library.currentTab == nil then
            switchTab({tabButton, tabContent})
        end

        -- 标签模块
        local tab = {}
        
        function tab.Section(tab, name, isOpen)
            local sectionContainer = Instance.new("Frame")
            sectionContainer.Name = "Section"
            sectionContainer.Parent = tabContent
            sectionContainer.BackgroundColor3 = colorScheme.secondary
            sectionContainer.BackgroundTransparency = transparency.element
            sectionContainer.BorderSizePixel = 0
            sectionContainer.Size = UDim2.new(1, 0, 0, 40)
            sectionContainer.ClipsDescendants = true
            sectionContainer.ZIndex = 5
            
            local sectionCorner = Instance.new("UICorner", sectionContainer)
            sectionCorner.CornerRadius = UDim.new(0, 8)
            
            -- 标题栏
            local sectionHeader = Instance.new("Frame")
            sectionHeader.Name = "Header"
            sectionHeader.Parent = sectionContainer
            sectionHeader.BackgroundTransparency = 1
            sectionHeader.BorderSizePixel = 0
            sectionHeader.Size = UDim2.new(1, 0, 0, 40)
            sectionHeader.ZIndex = 6
            
            -- 标题文本
            local sectionText = Instance.new("TextLabel")
            sectionText.Name = "Text"
            sectionText.Parent = sectionHeader
            sectionText.BackgroundTransparency = 1
            sectionText.Position = UDim2.new(0, 15, 0, 0)
            sectionText.Size = UDim2.new(1, -50, 1, 0)
            sectionText.Font = Enum.Font.GothamSemibold
            sectionText.Text = name
            sectionText.TextColor3 = colorScheme.text
            sectionText.TextSize = 16
            sectionText.TextXAlignment = Enum.TextXAlignment.Left
            sectionText.ZIndex = 7
            
            -- 切换按钮
            local toggleButton = Instance.new("ImageButton")
            toggleButton.Name = "Toggle"
            toggleButton.Parent = sectionHeader
            toggleButton.BackgroundTransparency = 1
            toggleButton.Position = UDim2.new(1, -35, 0.5, -12)
            toggleButton.Size = UDim2.new(0, 24, 0, 24)
            toggleButton.Image = "rbxassetid://6031302934" -- 向下箭头
            toggleButton.ImageColor3 = colorScheme.accent
            toggleButton.ZIndex = 7
            
            -- 内容区域
            local contentFrame = Instance.new("Frame")
            contentFrame.Name = "Content"
            contentFrame.Parent = sectionContainer
            contentFrame.BackgroundTransparency = 1
            contentFrame.BorderSizePixel = 0
            contentFrame.Position = UDim2.new(0, 10, 0, 45)
            contentFrame.Size = UDim2.new(1, -20, 0, 0)
            contentFrame.ZIndex = 6
            
            local contentLayout = Instance.new("UIListLayout", contentFrame)
            contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
            contentLayout.Padding = UDim.new(0, 10)
            
            contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                if not sectionContainer:FindFirstChild("Header") then return end
                contentFrame.Size = UDim2.new(1, -20, 0, contentLayout.AbsoluteContentSize.Y)
                sectionContainer.Size = UDim2.new(1, 0, 0, contentFrame.Size.Y.Offset + 50)
            end)
            
            -- 初始状态
            local isOpen = isOpen == nil and true or isOpen
            
            local function toggleState()
                isOpen = not isOpen
                
                if isOpen then
                    Tween(toggleButton, {0.2, "Quint", "Out"}, {Rotation = 0})
                    Tween(sectionContainer, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(1, 0, 0, contentFrame.Size.Y.Offset + 50)
                    })
                else
                    Tween(toggleButton, {0.2, "Quint", "Out"}, {Rotation = 180})
                    Tween(sectionContainer, {0.2, "Quint", "Out"}, {
                        Size = UDim2.new(1, 0, 0, 40)
                    })
                end
            end
            
            toggleButton.MouseButton1Click:Connect(toggleState)
            
            -- 如果初始关闭，调整状态
            if not isOpen then
                toggleButton.Rotation = 180
                sectionContainer.Size = UDim2.new(1, 0, 0, 40)
            end
            
            -- 节模块
            local section = {}
            
            -- 按钮元素
            function section.Button(section, text, callback)
                local callback = callback or function() end
                
                local button = Instance.new("TextButton")
                button.Name = "Button"
                button.Parent = contentFrame
                button.BackgroundColor3 = colorScheme.secondary
                button.BackgroundTransparency = transparency.element
                button.BorderSizePixel = 0
                button.Size = UDim2.new(1, 0, 0, 40)
                button.AutoButtonColor = false
                button.Font = Enum.Font.GothamSemibold
                button.Text = "   "..text
                button.TextColor3 = colorScheme.text
                button.TextSize = 16
                button.TextXAlignment = Enum.TextXAlignment.Left
                button.ZIndex = 7
                
                local buttonCorner = Instance.new("UICorner", button)
                buttonCorner.CornerRadius = UDim.new(0, 6)
                
                -- 按钮动画
                button.MouseEnter:Connect(function()
                    Tween(button, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = transparency.hover,
                        TextColor3 = colorScheme.accent
                    })
                end)
                
                button.MouseLeave:Connect(function()
                    Tween(button, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = transparency.element,
                        TextColor3 = colorScheme.text
                    })
                end)
                
                button.MouseButton1Click:Connect(function()
                    Ripple(button, colorScheme.accent)
                    spawn(callback)
                end)
                
                return button
            end
            
            -- 标签元素
            function section.Label(section, text)
                local label = Instance.new("TextLabel")
                label.Name = "Label"
                label.Parent = contentFrame
                label.BackgroundColor3 = colorScheme.secondary
                label.BackgroundTransparency = transparency.element
                label.BorderSizePixel = 0
                label.Size = UDim2.new(1, 0, 0, 30)
                label.Font = Enum.Font.GothamSemibold
                label.Text = text
                label.TextColor3 = colorScheme.text
                label.TextSize = 14
                label.ZIndex = 7
                
                local labelCorner = Instance.new("UICorner", label)
                labelCorner.CornerRadius = UDim.new(0, 6)
                
                return label
            end
            
            -- 切换开关元素
            function section.Toggle(section, text, flag, default, callback)
                local callback = callback or function() end
                local default = default or false
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                
                library.flags[flag] = default
                
                local toggle = Instance.new("TextButton")
                toggle.Name = "Toggle"
                toggle.Parent = contentFrame
                toggle.BackgroundColor3 = colorScheme.secondary
                toggle.BackgroundTransparency = transparency.element
                toggle.BorderSizePixel = 0
                toggle.Size = UDim2.new(1, 0, 0, 40)
                toggle.AutoButtonColor = false
                toggle.Font = Enum.Font.GothamSemibold
                toggle.Text = "   "..text
                toggle.TextColor3 = colorScheme.text
                toggle.TextSize = 16
                toggle.TextXAlignment = Enum.TextXAlignment.Left
                toggle.ZIndex = 7
                
                local toggleCorner = Instance.new("UICorner", toggle)
                toggleCorner.CornerRadius = UDim.new(0, 6)
                
                -- 开关背景
                local toggleBackground = Instance.new("Frame")
                toggleBackground.Name = "Background"
                toggleBackground.Parent = toggle
                toggleBackground.BackgroundColor3 = colorScheme.main
                toggleBackground.BackgroundTransparency = transparency.element
                toggleBackground.BorderSizePixel = 0
                toggleBackground.Position = UDim2.new(1, -60, 0.5, -12)
                toggleBackground.Size = UDim2.new(0, 50, 0, 24)
                toggleBackground.ZIndex = 8
                
                local toggleBgCorner = Instance.new("UICorner", toggleBackground)
                toggleBgCorner.CornerRadius = UDim.new(1, 0)
                
                -- 开关滑块
                local toggleSlider = Instance.new("Frame")
                toggleSlider.Name = "Slider"
                toggleSlider.Parent = toggleBackground
                toggleSlider.BackgroundColor3 = default and colorScheme.accent or colorScheme.text
                toggleSlider.BorderSizePixel = 0
                toggleSlider.Position = default and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)
                toggleSlider.Size = UDim2.new(0, 20, 0, 20)
                toggleSlider.ZIndex = 9
                
                local toggleSliderCorner = Instance.new("UICorner", toggleSlider)
                toggleSliderCorner.CornerRadius = UDim.new(1, 0)
                
                -- 切换函数
                local function setState(state)
                    if state == nil then state = not library.flags[flag] end
                    if library.flags[flag] == state then return end
                    
                    library.flags[flag] = state
                    
                    Tween(toggleSlider, {0.2, "Quint", "Out"}, {
                        Position = state and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10),
                        BackgroundColor3 = state and colorScheme.accent or colorScheme.text
                    })
                    
                    callback(state)
                end
                
                -- 按钮动画
                toggle.MouseEnter:Connect(function()
                    Tween(toggle, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = transparency.hover,
                        TextColor3 = colorScheme.accent
                    })
                end)
                
                toggle.MouseLeave:Connect(function()
                    Tween(toggle, {0.2, "Quint", "Out"}, {
                        BackgroundTransparency = transparency.element,
                        TextColor3 = colorScheme.text
                    })
                end)
                
                toggle.MouseButton1Click:Connect(function()
                    Ripple(toggle, colorScheme.accent)
                    setState()
                end)
                
                return {
                    SetState = setState
                }
            end
            
            -- 滑块元素
            function section.Slider(section, text, flag, min, max, default, callback)
                local callback = callback or function() end
                local min = min or 0
                local max = max or 100
                local default = default or min
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                
                library.flags[flag] = default
                
                local slider = Instance.new("Frame")
                slider.Name = "Slider"
                slider.Parent = contentFrame
                slider.BackgroundColor3 = colorScheme.secondary
                slider.BackgroundTransparency = transparency.element
                slider.BorderSizePixel = 0
                slider.Size = UDim2.new(1, 0, 0, 60)
                slider.ZIndex = 7
                
                local sliderCorner = Instance.new("UICorner", slider)
                sliderCorner.CornerRadius = UDim.new(0, 6)
                
                -- 标题
                local title = Instance.new("TextLabel")
                title.Name = "Title"
                title.Parent = slider
                title.BackgroundTransparency = 1
                title.Position = UDim2.new(0, 15, 0, 5)
                title.Size = UDim2.new(1, -30, 0, 20)
                title.Font = Enum.Font.GothamSemibold
                title.Text = text
                title.TextColor3 = colorScheme.text
                title.TextSize = 16
                title.TextXAlignment = Enum.TextXAlignment.Left
                title.ZIndex = 8
                
                -- 滑块背景
                local track = Instance.new("Frame")
                track.Name = "Track"
                track.Parent = slider
                track.BackgroundColor3 = colorScheme.main
                track.BackgroundTransparency = transparency.element
                track.BorderSizePixel = 0
                track.Position = UDim2.new(0, 15, 0, 35)
                track.Size = UDim2.new(1, -30, 0, 6)
                track.ZIndex = 8
                
                local trackCorner = Instance.new("UICorner", track)
                trackCorner.CornerRadius = UDim.new(1, 0)
                
                -- 滑块填充
                local fill = Instance.new("Frame")
                fill.Name = "Fill"
                fill.Parent = track
                fill.BackgroundColor3 = colorScheme.accent
                fill.BorderSizePixel = 0
                fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                fill.ZIndex = 9
                
                local fillCorner = Instance.new("UICorner", fill)
                fillCorner.CornerRadius = UDim.new(1, 0)
                
                -- 滑块手柄
                local thumb = Instance.new("Frame")
                thumb.Name = "Thumb"
                thumb.Parent = track
                thumb.BackgroundColor3 = colorScheme.text
                thumb.BorderSizePixel = 0
                thumb.Position = UDim2.new((default - min) / (max - min), -6, 0.5, -6)
                thumb.Size = UDim2.new(0, 12, 0, 12)
                thumb.ZIndex = 10
                
                local thumbCorner = Instance.new("UICorner", thumb)
                thumbCorner.CornerRadius = UDim.new(1, 0)
                
                -- 值显示
                local valueBox = Instance.new("TextBox")
                valueBox.Name = "Value"
                valueBox.Parent = slider
                valueBox.BackgroundColor3 = colorScheme.main
                valueBox.BackgroundTransparency = transparency.element
                valueBox.BorderSizePixel = 0
                valueBox.Position = UDim2.new(1, -70, 0, 5)
                valueBox.Size = UDim2.new(0, 55, 0, 20)
                valueBox.Font = Enum.Font.Gotham
                valueBox.Text = tostring(default)
                valueBox.TextColor3 = colorScheme.text
                valueBox.TextSize = 14
                valueBox.ZIndex = 8
                
                local valueCorner = Instance.new("UICorner", valueBox)
                valueCorner.CornerRadius = UDim.new(0, 4)
                
                -- 设置值函数
                local function setValue(value)
                    value = math.clamp(value, min, max)
                    library.flags[flag] = value
                    
                    local percent = (value - min) / (max - min)
                    Tween(fill, {0.1, "Linear", "Out"}, {Size = UDim2.new(percent, 0, 1, 0)})
                    Tween(thumb, {0.1, "Linear", "Out"}, {Position = UDim2.new(percent, -6, 0.5, -6)})
                    
                    valueBox.Text = tostring(value)
                    callback(value)
                end
                
                -- 滑块交互
                local dragging = false
                
                track.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = true
                        local percent = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
                        setValue(math.floor(min + (max - min) * percent))
                    end
                end)
                
                userInputService.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        dragging = false
                    end
                end)
                
                userInputService.InputChanged:Connect(function(input)
                    if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                        local percent = (input.Position.X - track.AbsolutePosition.X) / track.AbsoluteSize.X
                        setValue(math.floor(min + (max - min) * percent))
                    end
                end)
                
                -- 文本框输入
                valueBox.FocusLost:Connect(function()
                    local num = tonumber(valueBox.Text)
                    if num then
                        setValue(num)
                    else
                        valueBox.Text = tostring(library.flags[flag])
                    end
                end)
                
                return {
                    SetValue = setValue
                }
            end
            
            -- 下拉菜单元素
            function section.Dropdown(section, text, flag, options, callback)
                local callback = callback or function() end
                local options = options or {}
                assert(text, "No text provided")
                assert(flag, "No flag provided")
                
                library.flags[flag] = nil
                
                local dropdown = Instance.new("Frame")
                dropdown.Name = "Dropdown"
                dropdown.Parent = contentFrame
                dropdown.BackgroundColor3 = colorScheme.secondary
                dropdown.BackgroundTransparency = transparency.element
                dropdown.BorderSizePixel = 0
                dropdown.Size = UDim2.new(1, 0, 0, 40)
                dropdown.ClipsDescendants = true
                dropdown.ZIndex = 7
                
                local dropdownCorner = Instance.new("UICorner", dropdown)
                dropdownCorner.CornerRadius = UDim.new(0, 6)
                
                -- 标题
                local title = Instance.new("TextLabel")
                title.Name = "Title"
                title.Parent = dropdown
                title.BackgroundTransparency = 1
                title.Position = UDim2.new(0, 15, 0, 0)
                title.Size = UDim2.new(1, -50, 0, 40)
                title.Font = Enum.Font.GothamSemibold
                title.Text = text
                title.TextColor3 = colorScheme.text
                title.TextSize = 16
                title.TextXAlignment = Enum.TextXAlignment.Left
                title.ZIndex = 8
                
                -- 当前选择
                local selected = Instance.new("TextLabel")
                selected.Name = "Selected"
                selected.Parent = dropdown
                selected.BackgroundTransparency = 1
                selected.Position = UDim2.new(0.5, 0, 0, 0)
                selected.Size = UDim2.new(0.5, -15, 0, 40)
                selected.Font = Enum.Font.Gotham
                selected.Text = "None"
                selected.TextColor3 = colorScheme.text
                selected.TextSize = 14
                selected.TextXAlignment = Enum.TextXAlignment.Right
                selected.ZIndex = 8
                
                -- 切换按钮
                local toggle = Instance.new("ImageButton")
                toggle.Name = "Toggle"
                toggle.Parent = dropdown
                toggle.BackgroundTransparency = 1
                toggle.Position = UDim2.new(1, -35, 0.5, -12)
                toggle.Size = UDim2.new(0, 24, 0, 24)
                toggle.Image = "rbxassetid://6031302934" -- 向下箭头
                toggle.ImageColor3 = colorScheme.accent
                toggle.ZIndex = 8
                
                -- 选项容器
                local optionsContainer = Instance.new("Frame")
                optionsContainer.Name = "Options"
                optionsContainer.Parent = dropdown
                optionsContainer.BackgroundTransparency = 1
                optionsContainer.Position = UDim2.new(0, 10, 0, 45)
                optionsContainer.Size = UDim2.new(1, -20, 0, 0)
                optionsContainer.ZIndex = 8
                
                local optionsLayout = Instance.new("UIListLayout", optionsContainer)
                optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
                optionsLayout.Padding = UDim.new(0, 5)
                
                optionsLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                    optionsContainer.Size = UDim2.new(1, -20, 0, optionsLayout.AbsoluteContentSize.Y)
                    dropdown.Size = UDim2.new(1, 0, 0, optionsContainer.Size.Y.Offset + 50)
                end)
                
                -- 切换状态
                local isOpen = false
                
                local function toggleState()
                    isOpen = not isOpen
                    
                    Tween(toggle, {0.2, "Quint", "Out"}, {
                        Rotation = isOpen and 180 or 0
                    })
                    
                    if isOpen then
                        Tween(dropdown, {0.2, "Quint", "Out"}, {
                            Size = UDim2.new(1, 0, 0, optionsContainer.Size.Y.Offset + 50)
                        })
                    else
                        Tween(dropdown, {0.2, "Quint", "Out"}, {
                            Size = UDim2.new(1, 0, 0, 40)
                        })
                    end
                end
                
                toggle.MouseButton1Click:Connect(toggleState)
                
                -- 添加选项函数
                local function addOption(option)
                    local optionButton = Instance.new("TextButton")
                    optionButton.Name = "Option_"..option
                    optionButton.Parent = optionsContainer
                    optionButton.BackgroundColor3 = colorScheme.main
                    optionButton.BackgroundTransparency = transparency.element
                    optionButton.BorderSizePixel = 0
                    optionButton.Size = UDim2.new(1, 0, 0, 30)
                    optionButton.AutoButtonColor = false
                    optionButton.Font = Enum.Font.Gotham
                    optionButton.Text = option
                    optionButton.TextColor3 = colorScheme.text
                    optionButton.TextSize = 14
                    optionButton.ZIndex = 9
                    
                    local optionCorner = Instance.new("UICorner", optionButton)
                    optionCorner.CornerRadius = UDim.new(0, 4)
                    
                    -- 选项动画
                    optionButton.MouseEnter:Connect(function()
                        Tween(optionButton, {0.2, "Quint", "Out"}, {
                            BackgroundTransparency = transparency.hover,
                            TextColor3 = colorScheme.accent
                        })
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        Tween(optionButton, {0.2, "Quint", "Out"}, {
                            BackgroundTransparency = transparency.element,
                            TextColor3 = colorScheme.text
                        })
                    end)
                    
                    optionButton.MouseButton1Click:Connect(function()
                        selected.Text = option
                        library.flags[flag] = option
                        callback(option)
                        toggleState()
                    end)
                end
                
                -- 添加初始选项
                for _, option in pairs(options) do
                    addOption(option)
                end
                
                -- 下拉菜单功能
                return {
                    AddOption = function(self, option)
                        addOption(option)
                    end,
                    RemoveOption = function(self, option)
                        local option = optionsContainer:FindFirstChild("Option_"..option)
                        if option then
                            option:Destroy()
                        end
                    end,
                    SetOptions = function(self, newOptions)
                        optionsContainer:ClearAllChildren()
                        optionsContainer.UIListLayout:Destroy()
                        optionsLayout = Instance.new("UIListLayout", optionsContainer)
                        optionsLayout.SortOrder = Enum.SortOrder.LayoutOrder
                        optionsLayout.Padding = UDim.new(0, 5)
                        
                        for _, option in pairs(newOptions) do
                            addOption(option)
                        end
                    end
                }
            end
            
            return section
        end
        
        return tab
    end
    
    return window
end

return library
